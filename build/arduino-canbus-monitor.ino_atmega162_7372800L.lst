
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS\build/arduino-canbus-monitor.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      44:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <__vector_17>
      48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      4c:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__vector_19>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__vector_21>
      58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      60:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      68:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      6c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>

00000070 <__trampolines_end>:
__trampolines_start():
      70:	01 07       	cpc	r16, r17
      72:	00 00       	nop
      74:	0b 00       	.word	0x000b	; ????
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 00       	nop
      7c:	0a 04       	cpc	r0, r10
	...
      92:	05 01       	Address 0x00000092 is out of bounds.
.word	0xffff	; ????

00000093 <digital_pin_to_bit_mask_PGM>:
      93:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      a3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      b3:	01 02 04                                            ...

000000b6 <digital_pin_to_port_PGM>:
      b6:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      c6:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................
      d6:	05 05 05                                            ...

000000d9 <port_to_output_PGM>:
      d9:	00 00 3b 00 38 00 35 00 32 00 27 00                 ..;.8.5.2.'.

000000e5 <port_to_mode_PGM>:
      e5:	00 00 3a 00 37 00 34 00 31 00 26 00 00              ..:.7.4.1.&..

000000f2 <__ctors_start>:
__ctors_start():
      f2:	5c 0d       	add	r21, r12

000000f4 <__ctors_end>:
__dtors_end():
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d4 e0       	ldi	r29, 0x04	; 4
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     100:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     102:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     104:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     106:	ea e9       	ldi	r30, 0x9A	; 154
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     108:	f3 e2       	ldi	r31, 0x23	; 35
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     10c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     10e:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     110:	a4 35       	cpi	r26, 0x54	; 84
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     112:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0xc>

00000116 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     116:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     118:	a4 e5       	ldi	r26, 0x54	; 84
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     11a:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     120:	ae 3f       	cpi	r26, 0xFE	; 254
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     122:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>

00000126 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     126:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     128:	ca e7       	ldi	r28, 0x7A	; 122
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     12a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     12c:	04 c0       	rjmp	.+8      	; 0x136 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     12e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     130:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     132:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     136:	c9 37       	cpi	r28, 0x79	; 121
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     138:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     13a:	c9 f7       	brne	.-14     	; 0x12e <__do_global_ctors+0x8>
     13c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <main>
     140:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <_exit>

00000144 <__bad_interrupt>:
__vector_22():
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <setup>:
setup():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/arduino-canbus-monitor.ino:68
    //     default: 
    //       ret = 0;
    }

  return ret;
}
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	8c e0       	ldi	r24, 0x0C	; 12
     14c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <pinMode>
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	8c e0       	ldi	r24, 0x0C	; 12
     154:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
_ZN14HardwareSerial5beginEm():
     158:	26 e0       	ldi	r18, 0x06	; 6
     15a:	40 e0       	ldi	r20, 0x00	; 0
     15c:	52 ec       	ldi	r21, 0xC2	; 194
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	8d e5       	ldi	r24, 0x5D	; 93
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 a7 0c 	call	0x194e	; 0x194e <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
     16a:	61 e0       	ldi	r22, 0x01	; 1
     16c:	8f e0       	ldi	r24, 0x0F	; 15
     16e:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <Can232::init(unsigned char, unsigned char)>

00000172 <loop>:
loop():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/arduino-canbus-monitor.ino:71

void loop() {
    Can232::loop();
     172:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <Can232::loop()>

00000176 <serialEvent()>:
_Z11serialEventv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/arduino-canbus-monitor.ino:75
}

void serialEvent() {
    Can232::serialEvent();
     176:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <Can232::serialEvent()>

0000017a <HardwareSerial::write(int)>:
_ZN14HardwareSerial5writeEi():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:496
    Serial.print(',');
    int i;
    for (i = 0; i < len; i++) printFullByte(buf[i]);
    return CAN_OK;
#endif
}
     17a:	dc 01       	movw	r26, r24
     17c:	ed 91       	ld	r30, X+
     17e:	fc 91       	ld	r31, X
     180:	01 90       	ld	r0, Z+
     182:	f0 81       	ld	r31, Z
     184:	e0 2d       	mov	r30, r0
     186:	09 94       	ijmp

00000188 <Can232::instance()>:
_ZN6Can2328instanceEv():
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     190:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
     194:	89 2b       	or	r24, r25
     196:	61 f5       	brne	.+88     	; 0x1f0 <Can232::instance()+0x68>
     198:	8b e4       	ldi	r24, 0x4B	; 75
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <operator new(unsigned int)>
     1a0:	ec 01       	movw	r28, r24
     1a2:	8b e4       	ldi	r24, 0x4B	; 75
     1a4:	fe 01       	movw	r30, r28
     1a6:	11 92       	st	Z+, r1
     1a8:	8a 95       	dec	r24
     1aa:	e9 f7       	brne	.-6      	; 0x1a6 <Can232::instance()+0x1e>
_ZN6Can232C4Ev():
     1ac:	6d e0       	ldi	r22, 0x0D	; 13
     1ae:	ce 01       	movw	r24, r28
     1b0:	02 96       	adiw	r24, 0x02	; 2
     1b2:	0e 94 06 09 	call	0x120c	; 0x120c <MCP_CAN::MCP_CAN(unsigned char)>
     1b6:	89 e0       	ldi	r24, 0x09	; 9
     1b8:	8b 8b       	std	Y+19, r24	; 0x13
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	8c 8b       	std	Y+20, r24	; 0x14
     1be:	1d 8a       	std	Y+21, r1	; 0x15
     1c0:	1e 8a       	std	Y+22, r1	; 0x16
     1c2:	1f 8a       	std	Y+23, r1	; 0x17
     1c4:	18 8e       	std	Y+24, r1	; 0x18
     1c6:	19 8e       	std	Y+25, r1	; 0x19
     1c8:	1a 8e       	std	Y+26, r1	; 0x1a
     1ca:	1b 8e       	std	Y+27, r1	; 0x1b
     1cc:	1c 8e       	std	Y+28, r1	; 0x1c
     1ce:	1d 8e       	std	Y+29, r1	; 0x1d
     1d0:	1e a2       	std	Y+38, r1	; 0x26
     1d2:	64 e1       	ldi	r22, 0x14	; 20
     1d4:	71 e0       	ldi	r23, 0x01	; 1
     1d6:	ce 01       	movw	r24, r28
     1d8:	8c 5b       	subi	r24, 0xBC	; 188
     1da:	9f 4f       	sbci	r25, 0xFF	; 255
     1dc:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <String::String(char const*)>
     1e0:	fe 01       	movw	r30, r28
     1e2:	e6 5b       	subi	r30, 0xB6	; 182
     1e4:	ff 4f       	sbci	r31, 0xFF	; 255
     1e6:	10 82       	st	Z, r1
_ZN6Can2328instanceEv():
     1e8:	d0 93 55 01 	sts	0x0155, r29	; 0x800155 <__data_end+0x1>
     1ec:	c0 93 54 01 	sts	0x0154, r28	; 0x800154 <__data_end>
     1f0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     1f4:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <Can232::checkPassFilter(unsigned long)>:
_ZN6Can23215checkPassFilterEm():
     1fe:	dc 01       	movw	r26, r24
     200:	ed 91       	ld	r30, X+
     202:	fc 91       	ld	r31, X
     204:	30 97       	sbiw	r30, 0x00	; 0
     206:	19 f0       	breq	.+6      	; 0x20e <Can232::checkPassFilter(unsigned long)+0x10>
     208:	cb 01       	movw	r24, r22
     20a:	ba 01       	movw	r22, r20
     20c:	09 94       	ijmp
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	08 95       	ret

00000212 <Can232::openCanBus()>:
_ZN6Can23210openCanBusEv():
     212:	fc 01       	movw	r30, r24
     214:	44 89       	ldd	r20, Z+20	; 0x14
     216:	63 89       	ldd	r22, Z+19	; 0x13
     218:	02 96       	adiw	r24, 0x02	; 2
     21a:	0e 94 14 09 	call	0x1228	; 0x1228 <MCP_CAN::begin(unsigned char, unsigned char)>
     21e:	81 11       	cpse	r24, r1
     220:	83 e0       	ldi	r24, 0x03	; 3
     222:	08 95       	ret

00000224 <HexHelper::printFullByte(unsigned char)>:
_ZN9HexHelper13printFullByteEh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:519
        + (((INT32U)HexHelper::parseNibble(lw232Message[7])) << 4)
        + (((INT32U)HexHelper::parseNibble(lw232Message[8])));
    lw232CanId &= 0x1FFFFFFF;
}

void HexHelper::printFullByte(INT8U b) {
     224:	cf 93       	push	r28
     226:	c8 2f       	mov	r28, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:520
    if (b < 0x10) {
     228:	80 31       	cpi	r24, 0x10	; 16
     22a:	28 f4       	brcc	.+10     	; 0x236 <HexHelper::printFullByte(unsigned char)+0x12>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:521
        Serial.print('0');
     22c:	60 e3       	ldi	r22, 0x30	; 48
     22e:	8d e5       	ldi	r24, 0x5D	; 93
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <Print::print(char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:524
       // dbg0('0');
    }
    Serial.print(b, HEX);
     236:	40 e1       	ldi	r20, 0x10	; 16
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	6c 2f       	mov	r22, r28
     23c:	8d e5       	ldi	r24, 0x5D	; 93
     23e:	91 e0       	ldi	r25, 0x01	; 1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:526
    //dbgH(b);
}
     240:	cf 91       	pop	r28
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:524
void HexHelper::printFullByte(INT8U b) {
    if (b < 0x10) {
        Serial.print('0');
       // dbg0('0');
    }
    Serial.print(b, HEX);
     242:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <Print::print(unsigned char, int)>

00000246 <HexHelper::printNibble(unsigned char)>:
_ZN9HexHelper11printNibbleEh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:529
    //dbgH(b);
}

void HexHelper::printNibble(INT8U b) {
    Serial.print(b & 0x0F, HEX);
     246:	8f 70       	andi	r24, 0x0F	; 15
     248:	68 2f       	mov	r22, r24
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	40 e1       	ldi	r20, 0x10	; 16
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	8d e5       	ldi	r24, 0x5D	; 93
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <Print::print(int, int)>

00000258 <Can232::receiveSingleFrame()>:
_ZN6Can23218receiveSingleFrameEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:403
#endif
}



INT8U Can232::receiveSingleFrame() {
     258:	8f 92       	push	r8
     25a:	9f 92       	push	r9
     25c:	af 92       	push	r10
     25e:	bf 92       	push	r11
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	1f 93       	push	r17
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	ec 01       	movw	r28, r24
_ZN6Can23212readMsgBufIDEPmPhS1_():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:389
#endif
}

INT8U Can232::readMsgBufID(INT32U *ID, INT8U *len, INT8U buf[]) {
#ifndef _MCP_FAKE_MODE_
    return lw232CAN.readMsgBufID(ID, len, buf);
     270:	7c 01       	movw	r14, r24
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	e8 0e       	add	r14, r24
     276:	f1 1c       	adc	r15, r1
_ZN6Can23218receiveSingleFrameEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:406


INT8U Can232::receiveSingleFrame() {
    INT8U ret = LW232_OK;
    INT8U idx = 0;
    if (CAN_OK == readMsgBufID(&lw232CanId, &lw232PacketLen, lw232Buffer)) {
     278:	9e 01       	movw	r18, r28
     27a:	22 5e       	subi	r18, 0xE2	; 226
     27c:	3f 4f       	sbci	r19, 0xFF	; 255
     27e:	ae 01       	movw	r20, r28
     280:	4a 5d       	subi	r20, 0xDA	; 218
     282:	5f 4f       	sbci	r21, 0xFF	; 255
     284:	be 01       	movw	r22, r28
     286:	66 5e       	subi	r22, 0xE6	; 230
     288:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN6Can23212readMsgBufIDEPmPhS1_():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:389
#endif
}

INT8U Can232::readMsgBufID(INT32U *ID, INT8U *len, INT8U buf[]) {
#ifndef _MCP_FAKE_MODE_
    return lw232CAN.readMsgBufID(ID, len, buf);
     28a:	c7 01       	movw	r24, r14
     28c:	0e 94 ad 09 	call	0x135a	; 0x135a <MCP_CAN::readMsgBufID(unsigned long*, unsigned char*, unsigned char*)>
     290:	18 2f       	mov	r17, r24
_ZN6Can23218receiveSingleFrameEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:406


INT8U Can232::receiveSingleFrame() {
    INT8U ret = LW232_OK;
    INT8U idx = 0;
    if (CAN_OK == readMsgBufID(&lw232CanId, &lw232PacketLen, lw232Buffer)) {
     292:	81 11       	cpse	r24, r1
     294:	6f c0       	rjmp	.+222    	; 0x374 <Can232::receiveSingleFrame()+0x11c>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:407
        if (lw232CanId > 0x1FFFFFFF) {
     296:	4a 8d       	ldd	r20, Y+26	; 0x1a
     298:	5b 8d       	ldd	r21, Y+27	; 0x1b
     29a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     29c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     29e:	41 15       	cp	r20, r1
     2a0:	51 05       	cpc	r21, r1
     2a2:	61 05       	cpc	r22, r1
     2a4:	80 e2       	ldi	r24, 0x20	; 32
     2a6:	78 07       	cpc	r23, r24
     2a8:	08 f0       	brcs	.+2      	; 0x2ac <Can232::receiveSingleFrame()+0x54>
     2aa:	64 c0       	rjmp	.+200    	; 0x374 <Can232::receiveSingleFrame()+0x11c>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:410
            ret = LW232_ERR; // address if totally wrong
        }
        else if (checkPassFilter(lw232CanId)) {// do we want to skip some addresses?
     2ac:	ce 01       	movw	r24, r28
     2ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Can232::checkPassFilter(unsigned long)>
     2b2:	88 23       	and	r24, r24
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <Can232::receiveSingleFrame()+0x60>
     2b6:	47 c0       	rjmp	.+142    	; 0x346 <Can232::receiveSingleFrame()+0xee>
_ZN6Can23215isExtendedFrameEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:454
}


INT8U Can232::isExtendedFrame() {
#ifndef _MCP_FAKE_MODE_
    return lw232CAN.isExtendedFrame();
     2b8:	c7 01       	movw	r24, r14
     2ba:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <MCP_CAN::isExtendedFrame()>
_ZN6Can23218receiveSingleFrameEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:411
    if (CAN_OK == readMsgBufID(&lw232CanId, &lw232PacketLen, lw232Buffer)) {
        if (lw232CanId > 0x1FFFFFFF) {
            ret = LW232_ERR; // address if totally wrong
        }
        else if (checkPassFilter(lw232CanId)) {// do we want to skip some addresses?
            if (isExtendedFrame()) {
     2be:	88 23       	and	r24, r24
     2c0:	01 f1       	breq	.+64     	; 0x302 <Can232::receiveSingleFrame()+0xaa>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:412
                Serial.print(LW232_TR29);
     2c2:	64 e5       	ldi	r22, 0x54	; 84
     2c4:	8d e5       	ldi	r24, 0x5D	; 93
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <Print::print(char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:413
                HexHelper::printFullByte(HIGH_BYTE(HIGH_WORD(lw232CanId)));
     2cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2ce:	0e 94 12 01 	call	0x224	; 0x224 <HexHelper::printFullByte(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:414
                HexHelper::printFullByte(LOW_BYTE(HIGH_WORD(lw232CanId)));
     2d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2d4:	0e 94 12 01 	call	0x224	; 0x224 <HexHelper::printFullByte(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:415
                HexHelper::printFullByte(HIGH_BYTE(LOW_WORD(lw232CanId)));
     2d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2da:	0e 94 12 01 	call	0x224	; 0x224 <HexHelper::printFullByte(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:421
                HexHelper::printFullByte(LOW_BYTE(LOW_WORD(lw232CanId)));
            }
            else {
                Serial.print(LW232_TR11);
                HexHelper::printNibble(HIGH_BYTE(LOW_WORD(lw232CanId)));
                HexHelper::printFullByte(LOW_BYTE(LOW_WORD(lw232CanId)));
     2de:	8a 8d       	ldd	r24, Y+26	; 0x1a
     2e0:	0e 94 12 01 	call	0x224	; 0x224 <HexHelper::printFullByte(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:424
            }
            //write data len
            HexHelper::printNibble(lw232PacketLen);
     2e4:	8e a1       	ldd	r24, Y+38	; 0x26
     2e6:	0e 94 23 01 	call	0x246	; 0x246 <HexHelper::printNibble(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:426
            //write data
            for (idx = 0; idx < lw232PacketLen; idx++) {
     2ea:	f1 2c       	mov	r15, r1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:426 (discriminator 3)
     2ec:	8e a1       	ldd	r24, Y+38	; 0x26
     2ee:	f8 16       	cp	r15, r24
     2f0:	88 f4       	brcc	.+34     	; 0x314 <Can232::receiveSingleFrame()+0xbc>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:427 (discriminator 2)
                HexHelper::printFullByte(lw232Buffer[idx]);
     2f2:	fe 01       	movw	r30, r28
     2f4:	ef 0d       	add	r30, r15
     2f6:	f1 1d       	adc	r31, r1
     2f8:	86 8d       	ldd	r24, Z+30	; 0x1e
     2fa:	0e 94 12 01 	call	0x224	; 0x224 <HexHelper::printFullByte(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:426 (discriminator 2)
                HexHelper::printFullByte(LOW_BYTE(LOW_WORD(lw232CanId)));
            }
            //write data len
            HexHelper::printNibble(lw232PacketLen);
            //write data
            for (idx = 0; idx < lw232PacketLen; idx++) {
     2fe:	f3 94       	inc	r15
     300:	f5 cf       	rjmp	.-22     	; 0x2ec <Can232::receiveSingleFrame()+0x94>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:419
                HexHelper::printFullByte(LOW_BYTE(HIGH_WORD(lw232CanId)));
                HexHelper::printFullByte(HIGH_BYTE(LOW_WORD(lw232CanId)));
                HexHelper::printFullByte(LOW_BYTE(LOW_WORD(lw232CanId)));
            }
            else {
                Serial.print(LW232_TR11);
     302:	64 e7       	ldi	r22, 0x74	; 116
     304:	8d e5       	ldi	r24, 0x5D	; 93
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <Print::print(char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:420
                HexHelper::printNibble(HIGH_BYTE(LOW_WORD(lw232CanId)));
     30c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     30e:	0e 94 23 01 	call	0x246	; 0x246 <HexHelper::printNibble(unsigned char)>
     312:	e5 cf       	rjmp	.-54     	; 0x2de <Can232::receiveSingleFrame()+0x86>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:430
            //write data
            for (idx = 0; idx < lw232PacketLen; idx++) {
                HexHelper::printFullByte(lw232Buffer[idx]);
            }
            //write timestamp if needed
            if (lw232TimeStamp != LW232_TIMESTAMP_OFF) {
     314:	89 8d       	ldd	r24, Y+25	; 0x19
     316:	88 23       	and	r24, r24
     318:	b1 f0       	breq	.+44     	; 0x346 <Can232::receiveSingleFrame()+0xee>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:431
                INT32U time = millis();
     31a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <millis>
     31e:	6b 01       	movw	r12, r22
     320:	7c 01       	movw	r14, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:432
                if (lw232TimeStamp == LW232_TIMESTAMP_ON_NORMAL) { 
     322:	89 8d       	ldd	r24, Y+25	; 0x19
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	e1 f4       	brne	.+56     	; 0x360 <Can232::receiveSingleFrame()+0x108>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:434
                    // standard LAWICEL protocol. two bytes.
                    time %= 60000;  
     328:	c7 01       	movw	r24, r14
     32a:	b6 01       	movw	r22, r12
     32c:	20 e6       	ldi	r18, 0x60	; 96
     32e:	3a ee       	ldi	r19, 0xEA	; 234
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__udivmodsi4>
     338:	6b 01       	movw	r12, r22
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:440
                } else {
                    // non standard protocol - 4 bytes timestamp
                    HexHelper::printFullByte(HIGH_BYTE(HIGH_WORD(time)));
                    HexHelper::printFullByte(LOW_BYTE(HIGH_WORD(time)));
                }
                HexHelper::printFullByte(HIGH_BYTE(LOW_WORD(time)));
     33a:	8d 2d       	mov	r24, r13
     33c:	0e 94 12 01 	call	0x224	; 0x224 <HexHelper::printFullByte(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:441
                HexHelper::printFullByte(LOW_BYTE(LOW_WORD(time)));
     340:	8c 2d       	mov	r24, r12
     342:	0e 94 12 01 	call	0x224	; 0x224 <HexHelper::printFullByte(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:449
    }
    else {
        ret = LW232_ERR;
    }
    return ret;
}
     346:	81 2f       	mov	r24, r17
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	df 90       	pop	r13
     354:	cf 90       	pop	r12
     356:	bf 90       	pop	r11
     358:	af 90       	pop	r10
     35a:	9f 90       	pop	r9
     35c:	8f 90       	pop	r8
     35e:	08 95       	ret
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:437
                if (lw232TimeStamp == LW232_TIMESTAMP_ON_NORMAL) { 
                    // standard LAWICEL protocol. two bytes.
                    time %= 60000;  
                } else {
                    // non standard protocol - 4 bytes timestamp
                    HexHelper::printFullByte(HIGH_BYTE(HIGH_WORD(time)));
     360:	47 01       	movw	r8, r14
     362:	aa 24       	eor	r10, r10
     364:	bb 24       	eor	r11, r11
     366:	89 2d       	mov	r24, r9
     368:	0e 94 12 01 	call	0x224	; 0x224 <HexHelper::printFullByte(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:438
                    HexHelper::printFullByte(LOW_BYTE(HIGH_WORD(time)));
     36c:	88 2d       	mov	r24, r8
     36e:	0e 94 12 01 	call	0x224	; 0x224 <HexHelper::printFullByte(unsigned char)>
     372:	e3 cf       	rjmp	.-58     	; 0x33a <Can232::receiveSingleFrame()+0xe2>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:446
                HexHelper::printFullByte(LOW_BYTE(LOW_WORD(time)));
            }
        }
    }
    else {
        ret = LW232_ERR;
     374:	13 e0       	ldi	r17, 0x03	; 3
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:448
    }
    return ret;
     376:	e7 cf       	rjmp	.-50     	; 0x346 <Can232::receiveSingleFrame()+0xee>

00000378 <HexHelper::parseNibble(unsigned char)>:
_ZN9HexHelper11parseNibbleEh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:534
    Serial.print(b & 0x0F, HEX);
    //dbgH(b & 0x0F);
}


INT8U HexHelper::parseNibble(INT8U hex) {
     378:	98 2f       	mov	r25, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:536
    INT8U ret = 0;
    if (hex >= '0' && hex <= '9') {
     37a:	80 ed       	ldi	r24, 0xD0	; 208
     37c:	89 0f       	add	r24, r25
     37e:	8a 30       	cpi	r24, 0x0A	; 10
     380:	70 f0       	brcs	.+28     	; 0x39e <HexHelper::parseNibble(unsigned char)+0x26>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:538
        ret = hex - '0';
    } else if (hex >= 'a' && hex <= 'f') {
     382:	8f e9       	ldi	r24, 0x9F	; 159
     384:	89 0f       	add	r24, r25
     386:	86 30       	cpi	r24, 0x06	; 6
     388:	18 f4       	brcc	.+6      	; 0x390 <HexHelper::parseNibble(unsigned char)+0x18>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:539
        ret = hex - 'a' + 10;
     38a:	89 ea       	ldi	r24, 0xA9	; 169
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:541
    } else if (hex >= 'A' && hex <= 'F') {
        ret = hex - 'A' + 10;
     38c:	89 0f       	add	r24, r25
     38e:	08 95       	ret
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:540
    INT8U ret = 0;
    if (hex >= '0' && hex <= '9') {
        ret = hex - '0';
    } else if (hex >= 'a' && hex <= 'f') {
        ret = hex - 'a' + 10;
    } else if (hex >= 'A' && hex <= 'F') {
     390:	8f eb       	ldi	r24, 0xBF	; 191
     392:	89 0f       	add	r24, r25
     394:	86 30       	cpi	r24, 0x06	; 6
     396:	10 f4       	brcc	.+4      	; 0x39c <HexHelper::parseNibble(unsigned char)+0x24>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:541
        ret = hex - 'A' + 10;
     398:	89 ec       	ldi	r24, 0xC9	; 201
     39a:	f8 cf       	rjmp	.-16     	; 0x38c <HexHelper::parseNibble(unsigned char)+0x14>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:535
    //dbgH(b & 0x0F);
}


INT8U HexHelper::parseNibble(INT8U hex) {
    INT8U ret = 0;
     39c:	80 e0       	ldi	r24, 0x00	; 0
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:544
        ret = hex - 'a' + 10;
    } else if (hex >= 'A' && hex <= 'F') {
        ret = hex - 'A' + 10;
    } // else error, return 0
    return ret;
}
     39e:	08 95       	ret

000003a0 <Can232::parseCanStdId()>:
_ZN6Can23213parseCanStdIdEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:500
#endif
}



void Can232::parseCanStdId() {
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:501
    lw232CanId = (((INT32U)HexHelper::parseNibble(lw232Message[1])) << 8)
     3ae:	88 a5       	ldd	r24, Y+40	; 0x28
     3b0:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
     3b4:	c8 2e       	mov	r12, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:502
        + (((INT32U)HexHelper::parseNibble(lw232Message[2])) << 4)
     3b6:	89 a5       	ldd	r24, Y+41	; 0x29
     3b8:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:501
}



void Can232::parseCanStdId() {
    lw232CanId = (((INT32U)HexHelper::parseNibble(lw232Message[1])) << 8)
     3bc:	d1 2c       	mov	r13, r1
     3be:	f1 2c       	mov	r15, r1
     3c0:	e1 2c       	mov	r14, r1
     3c2:	fe 2c       	mov	r15, r14
     3c4:	ed 2c       	mov	r14, r13
     3c6:	dc 2c       	mov	r13, r12
     3c8:	cc 24       	eor	r12, r12
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:502
        + (((INT32U)HexHelper::parseNibble(lw232Message[2])) << 4)
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	24 e0       	ldi	r18, 0x04	; 4
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	aa 1f       	adc	r26, r26
     3d8:	bb 1f       	adc	r27, r27
     3da:	2a 95       	dec	r18
     3dc:	d1 f7       	brne	.-12     	; 0x3d2 <Can232::parseCanStdId()+0x32>
     3de:	c8 0e       	add	r12, r24
     3e0:	d9 1e       	adc	r13, r25
     3e2:	ea 1e       	adc	r14, r26
     3e4:	fb 1e       	adc	r15, r27
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:503
        + (((INT32U)HexHelper::parseNibble(lw232Message[3])));
     3e6:	8a a5       	ldd	r24, Y+42	; 0x2a
     3e8:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
     3ec:	c8 0e       	add	r12, r24
     3ee:	d1 1c       	adc	r13, r1
     3f0:	e1 1c       	adc	r14, r1
     3f2:	f1 1c       	adc	r15, r1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:504
    lw232CanId &= 0x7FF;
     3f4:	87 e0       	ldi	r24, 0x07	; 7
     3f6:	d8 22       	and	r13, r24
     3f8:	ee 24       	eor	r14, r14
     3fa:	ff 24       	eor	r15, r15
     3fc:	ca 8e       	std	Y+26, r12	; 0x1a
     3fe:	db 8e       	std	Y+27, r13	; 0x1b
     400:	ec 8e       	std	Y+28, r14	; 0x1c
     402:	fd 8e       	std	Y+29, r15	; 0x1d
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:505
}
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	08 95       	ret

00000412 <Can232::parseCanExtId()>:
_ZN6Can23213parseCanExtIdEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:507

void Can232::parseCanExtId() {
     412:	9f 92       	push	r9
     414:	af 92       	push	r10
     416:	bf 92       	push	r11
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:508
    lw232CanId = (((INT32U)HexHelper::parseNibble(lw232Message[1])) << 28)
     42a:	88 a5       	ldd	r24, Y+40	; 0x28
     42c:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
     430:	c8 2e       	mov	r12, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:509
        + (((INT32U)HexHelper::parseNibble(lw232Message[2])) << 24)
     432:	89 a5       	ldd	r24, Y+41	; 0x29
     434:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:508
        + (((INT32U)HexHelper::parseNibble(lw232Message[3])));
    lw232CanId &= 0x7FF;
}

void Can232::parseCanExtId() {
    lw232CanId = (((INT32U)HexHelper::parseNibble(lw232Message[1])) << 28)
     438:	d1 2c       	mov	r13, r1
     43a:	f1 2c       	mov	r15, r1
     43c:	e1 2c       	mov	r14, r1
     43e:	9c e1       	ldi	r25, 0x1C	; 28
     440:	cc 0c       	add	r12, r12
     442:	dd 1c       	adc	r13, r13
     444:	ee 1c       	adc	r14, r14
     446:	ff 1c       	adc	r15, r15
     448:	9a 95       	dec	r25
     44a:	d1 f7       	brne	.-12     	; 0x440 <Can232::parseCanExtId()+0x2e>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:509
        + (((INT32U)HexHelper::parseNibble(lw232Message[2])) << 24)
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	a0 e0       	ldi	r26, 0x00	; 0
     452:	b8 2f       	mov	r27, r24
     454:	aa 27       	eor	r26, r26
     456:	99 27       	eor	r25, r25
     458:	88 27       	eor	r24, r24
     45a:	c8 0e       	add	r12, r24
     45c:	d9 1e       	adc	r13, r25
     45e:	ea 1e       	adc	r14, r26
     460:	fb 1e       	adc	r15, r27
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:510
        + (((INT32U)HexHelper::parseNibble(lw232Message[3])) << 20)
     462:	8a a5       	ldd	r24, Y+42	; 0x2a
     464:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
     468:	98 2e       	mov	r9, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:511
        + (((INT32U)HexHelper::parseNibble(lw232Message[4])) << 16)
     46a:	8b a5       	ldd	r24, Y+43	; 0x2b
     46c:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
     470:	a8 2e       	mov	r10, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:512
        + (((INT32U)HexHelper::parseNibble(lw232Message[5])) << 12)
     472:	8c a5       	ldd	r24, Y+44	; 0x2c
     474:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
     478:	b8 2e       	mov	r11, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:513
        + (((INT32U)HexHelper::parseNibble(lw232Message[6])) << 8)
     47a:	8d a5       	ldd	r24, Y+45	; 0x2d
     47c:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
     480:	08 2f       	mov	r16, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:514
        + (((INT32U)HexHelper::parseNibble(lw232Message[7])) << 4)
     482:	8e a5       	ldd	r24, Y+46	; 0x2e
     484:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
     488:	18 2f       	mov	r17, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:515
        + (((INT32U)HexHelper::parseNibble(lw232Message[8])));
     48a:	8f a5       	ldd	r24, Y+47	; 0x2f
     48c:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:510
}

void Can232::parseCanExtId() {
    lw232CanId = (((INT32U)HexHelper::parseNibble(lw232Message[1])) << 28)
        + (((INT32U)HexHelper::parseNibble(lw232Message[2])) << 24)
        + (((INT32U)HexHelper::parseNibble(lw232Message[3])) << 20)
     490:	49 2d       	mov	r20, r9
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	34 e1       	ldi	r19, 0x14	; 20
     49a:	44 0f       	add	r20, r20
     49c:	55 1f       	adc	r21, r21
     49e:	66 1f       	adc	r22, r22
     4a0:	77 1f       	adc	r23, r23
     4a2:	3a 95       	dec	r19
     4a4:	d1 f7       	brne	.-12     	; 0x49a <Can232::parseCanExtId()+0x88>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:515
        + (((INT32U)HexHelper::parseNibble(lw232Message[4])) << 16)
        + (((INT32U)HexHelper::parseNibble(lw232Message[5])) << 12)
        + (((INT32U)HexHelper::parseNibble(lw232Message[6])) << 8)
        + (((INT32U)HexHelper::parseNibble(lw232Message[7])) << 4)
        + (((INT32U)HexHelper::parseNibble(lw232Message[8])));
     4a6:	c8 0e       	add	r12, r24
     4a8:	d1 1c       	adc	r13, r1
     4aa:	e1 1c       	adc	r14, r1
     4ac:	f1 1c       	adc	r15, r1
     4ae:	4c 0d       	add	r20, r12
     4b0:	5d 1d       	adc	r21, r13
     4b2:	6e 1d       	adc	r22, r14
     4b4:	7f 1d       	adc	r23, r15
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:511

void Can232::parseCanExtId() {
    lw232CanId = (((INT32U)HexHelper::parseNibble(lw232Message[1])) << 28)
        + (((INT32U)HexHelper::parseNibble(lw232Message[2])) << 24)
        + (((INT32U)HexHelper::parseNibble(lw232Message[3])) << 20)
        + (((INT32U)HexHelper::parseNibble(lw232Message[4])) << 16)
     4b6:	ca 2c       	mov	r12, r10
     4b8:	d1 2c       	mov	r13, r1
     4ba:	f1 2c       	mov	r15, r1
     4bc:	e1 2c       	mov	r14, r1
     4be:	76 01       	movw	r14, r12
     4c0:	dd 24       	eor	r13, r13
     4c2:	cc 24       	eor	r12, r12
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:515
        + (((INT32U)HexHelper::parseNibble(lw232Message[5])) << 12)
        + (((INT32U)HexHelper::parseNibble(lw232Message[6])) << 8)
        + (((INT32U)HexHelper::parseNibble(lw232Message[7])) << 4)
        + (((INT32U)HexHelper::parseNibble(lw232Message[8])));
     4c4:	4c 0d       	add	r20, r12
     4c6:	5d 1d       	adc	r21, r13
     4c8:	6e 1d       	adc	r22, r14
     4ca:	7f 1d       	adc	r23, r15
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:512
void Can232::parseCanExtId() {
    lw232CanId = (((INT32U)HexHelper::parseNibble(lw232Message[1])) << 28)
        + (((INT32U)HexHelper::parseNibble(lw232Message[2])) << 24)
        + (((INT32U)HexHelper::parseNibble(lw232Message[3])) << 20)
        + (((INT32U)HexHelper::parseNibble(lw232Message[4])) << 16)
        + (((INT32U)HexHelper::parseNibble(lw232Message[5])) << 12)
     4cc:	cb 2c       	mov	r12, r11
     4ce:	d1 2c       	mov	r13, r1
     4d0:	f1 2c       	mov	r15, r1
     4d2:	e1 2c       	mov	r14, r1
     4d4:	fc e0       	ldi	r31, 0x0C	; 12
     4d6:	cc 0c       	add	r12, r12
     4d8:	dd 1c       	adc	r13, r13
     4da:	ee 1c       	adc	r14, r14
     4dc:	ff 1c       	adc	r15, r15
     4de:	fa 95       	dec	r31
     4e0:	d1 f7       	brne	.-12     	; 0x4d6 <Can232::parseCanExtId()+0xc4>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:515
        + (((INT32U)HexHelper::parseNibble(lw232Message[6])) << 8)
        + (((INT32U)HexHelper::parseNibble(lw232Message[7])) << 4)
        + (((INT32U)HexHelper::parseNibble(lw232Message[8])));
     4e2:	4c 0d       	add	r20, r12
     4e4:	5d 1d       	adc	r21, r13
     4e6:	6e 1d       	adc	r22, r14
     4e8:	7f 1d       	adc	r23, r15
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:513
    lw232CanId = (((INT32U)HexHelper::parseNibble(lw232Message[1])) << 28)
        + (((INT32U)HexHelper::parseNibble(lw232Message[2])) << 24)
        + (((INT32U)HexHelper::parseNibble(lw232Message[3])) << 20)
        + (((INT32U)HexHelper::parseNibble(lw232Message[4])) << 16)
        + (((INT32U)HexHelper::parseNibble(lw232Message[5])) << 12)
        + (((INT32U)HexHelper::parseNibble(lw232Message[6])) << 8)
     4ea:	c0 2e       	mov	r12, r16
     4ec:	d1 2c       	mov	r13, r1
     4ee:	f1 2c       	mov	r15, r1
     4f0:	e1 2c       	mov	r14, r1
     4f2:	fe 2c       	mov	r15, r14
     4f4:	ed 2c       	mov	r14, r13
     4f6:	dc 2c       	mov	r13, r12
     4f8:	cc 24       	eor	r12, r12
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:515
        + (((INT32U)HexHelper::parseNibble(lw232Message[7])) << 4)
        + (((INT32U)HexHelper::parseNibble(lw232Message[8])));
     4fa:	4c 0d       	add	r20, r12
     4fc:	5d 1d       	adc	r21, r13
     4fe:	6e 1d       	adc	r22, r14
     500:	7f 1d       	adc	r23, r15
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:514
        + (((INT32U)HexHelper::parseNibble(lw232Message[2])) << 24)
        + (((INT32U)HexHelper::parseNibble(lw232Message[3])) << 20)
        + (((INT32U)HexHelper::parseNibble(lw232Message[4])) << 16)
        + (((INT32U)HexHelper::parseNibble(lw232Message[5])) << 12)
        + (((INT32U)HexHelper::parseNibble(lw232Message[6])) << 8)
        + (((INT32U)HexHelper::parseNibble(lw232Message[7])) << 4)
     502:	c1 2e       	mov	r12, r17
     504:	d1 2c       	mov	r13, r1
     506:	f1 2c       	mov	r15, r1
     508:	e1 2c       	mov	r14, r1
     50a:	b4 e0       	ldi	r27, 0x04	; 4
     50c:	cc 0c       	add	r12, r12
     50e:	dd 1c       	adc	r13, r13
     510:	ee 1c       	adc	r14, r14
     512:	ff 1c       	adc	r15, r15
     514:	ba 95       	dec	r27
     516:	d1 f7       	brne	.-12     	; 0x50c <__stack+0xd>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:515
        + (((INT32U)HexHelper::parseNibble(lw232Message[8])));
     518:	4c 0d       	add	r20, r12
     51a:	5d 1d       	adc	r21, r13
     51c:	6e 1d       	adc	r22, r14
     51e:	7f 1d       	adc	r23, r15
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:516
    lw232CanId &= 0x1FFFFFFF;
     520:	7f 71       	andi	r23, 0x1F	; 31
     522:	4a 8f       	std	Y+26, r20	; 0x1a
     524:	5b 8f       	std	Y+27, r21	; 0x1b
     526:	6c 8f       	std	Y+28, r22	; 0x1c
     528:	7d 8f       	std	Y+29, r23	; 0x1d
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:517
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	bf 90       	pop	r11
     53c:	af 90       	pop	r10
     53e:	9f 90       	pop	r9
     540:	08 95       	ret

00000542 <HexHelper::parseFullByte(unsigned char, unsigned char)>:
_ZN9HexHelper13parseFullByteEhh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:546
        ret = hex - 'A' + 10;
    } // else error, return 0
    return ret;
}

INT8U HexHelper::parseFullByte(INT8U H, INT8U L) {
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	d6 2f       	mov	r29, r22
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:547
    return (parseNibble(H) << 4) + parseNibble(L);
     548:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
     54c:	c8 2f       	mov	r28, r24
     54e:	8d 2f       	mov	r24, r29
     550:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
     554:	c2 95       	swap	r28
     556:	c0 7f       	andi	r28, 0xF0	; 240
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:548
}
     558:	8c 0f       	add	r24, r28
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <HexHelper::parseNibbleWithLimit(unsigned char, unsigned char)>:
_ZN9HexHelper20parseNibbleWithLimitEhh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:550

INT8U HexHelper::parseNibbleWithLimit(INT8U hex, INT8U limit) {
     560:	cf 93       	push	r28
     562:	c6 2f       	mov	r28, r22
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:551
    INT8U ret = parseNibble(hex);
     564:	0e 94 bc 01 	call	0x378	; 0x378 <HexHelper::parseNibble(unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:552
    if (ret < limit)
     568:	8c 17       	cp	r24, r28
     56a:	08 f0       	brcs	.+2      	; 0x56e <HexHelper::parseNibbleWithLimit(unsigned char, unsigned char)+0xe>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:555
        return ret;
    else
        return 0;
     56c:	80 e0       	ldi	r24, 0x00	; 0
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:556
}
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <Can232::parseAndRunCommand()>:
_ZN6Can23218parseAndRunCommandEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:150
        Serial.write(LW232_RET_ASCII_ERROR);
    }
    return 0;
}

INT8U Can232::parseAndRunCommand() {
     572:	8f 92       	push	r8
     574:	9f 92       	push	r9
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	1f 92       	push	r1
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:153
    INT8U ret = LW232_OK;
    INT8U idx = 0;
    INT8U err = 0;
     590:	19 82       	std	Y+1, r1	; 0x01
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:155

    lw232LastErr = LW232_OK;
     592:	dc 01       	movw	r26, r24
     594:	56 96       	adiw	r26, 0x16	; 22
     596:	1c 92       	st	X, r1
     598:	56 97       	sbiw	r26, 0x16	; 22
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:157

    switch (lw232Message[0]) {
     59a:	97 96       	adiw	r26, 0x27	; 39
     59c:	ec 91       	ld	r30, X
     59e:	97 97       	sbiw	r26, 0x27	; 39
     5a0:	e1 54       	subi	r30, 0x41	; 65
     5a2:	e6 33       	cpi	r30, 0x36	; 54
     5a4:	08 f0       	brcs	.+2      	; 0x5a8 <Can232::parseAndRunCommand()+0x36>
     5a6:	dd c1       	rjmp	.+954    	; 0x962 <Can232::parseAndRunCommand()+0x3f0>
     5a8:	5c 01       	movw	r10, r24
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	e6 52       	subi	r30, 0x26	; 38
     5ae:	fd 4f       	sbci	r31, 0xFD	; 253
     5b0:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__tablejump2__>
     5b4:	1a 04       	cpc	r1, r10
     5b6:	b1 04       	cpc	r11, r1
     5b8:	41 03       	mulsu	r20, r17
     5ba:	b1 04       	cpc	r11, r1
     5bc:	b1 04       	cpc	r11, r1
     5be:	46 04       	cpc	r4, r6
     5c0:	b1 04       	cpc	r11, r1
     5c2:	b1 04       	cpc	r11, r1
     5c4:	b1 04       	cpc	r11, r1
     5c6:	b1 04       	cpc	r11, r1
     5c8:	b1 04       	cpc	r11, r1
     5ca:	32 03       	mulsu	r19, r18
     5cc:	10 03       	mulsu	r17, r16
     5ce:	83 04       	cpc	r8, r3
     5d0:	32 03       	mulsu	r19, r18
     5d2:	06 04       	cpc	r0, r6
     5d4:	9e 04       	cpc	r9, r14
     5d6:	ea 03       	fmulsu	r22, r18
     5d8:	20 03       	mulsu	r18, r16
     5da:	88 03       	fmulsu	r16, r16
     5dc:	67 04       	cpc	r6, r7
     5de:	7c 04       	cpc	r7, r12
     5e0:	10 03       	mulsu	r17, r16
     5e2:	5a 04       	cpc	r5, r10
     5e4:	b1 04       	cpc	r11, r1
     5e6:	86 04       	cpc	r8, r6
     5e8:	b1 04       	cpc	r11, r1
     5ea:	b1 04       	cpc	r11, r1
     5ec:	b1 04       	cpc	r11, r1
     5ee:	b1 04       	cpc	r11, r1
     5f0:	b1 04       	cpc	r11, r1
     5f2:	b1 04       	cpc	r11, r1
     5f4:	b1 04       	cpc	r11, r1
     5f6:	b1 04       	cpc	r11, r1
     5f8:	b1 04       	cpc	r11, r1
     5fa:	b1 04       	cpc	r11, r1
     5fc:	b1 04       	cpc	r11, r1
     5fe:	b1 04       	cpc	r11, r1
     600:	b1 04       	cpc	r11, r1
     602:	b1 04       	cpc	r11, r1
     604:	b1 04       	cpc	r11, r1
     606:	b1 04       	cpc	r11, r1
     608:	b1 04       	cpc	r11, r1
     60a:	b1 04       	cpc	r11, r1
     60c:	10 03       	mulsu	r17, r16
     60e:	b1 04       	cpc	r11, r1
     610:	b1 04       	cpc	r11, r1
     612:	b1 04       	cpc	r11, r1
     614:	b1 04       	cpc	r11, r1
     616:	c4 03       	fmuls	r20, r20
     618:	24 03       	mulsu	r18, r20
     61a:	4b 03       	fmul	r20, r19
     61c:	b1 04       	cpc	r11, r1
     61e:	7c 04       	cpc	r7, r12
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:315
            ret = LW232_ERR;
        }
        break;
    case LW232_CMD_FILTER:
        // Wn[CR] Filter mode setting. By default CAN232 works in dual filter mode (0) and is backwards compatible with previous CAN232 versions.
        ret = LW232_ERR_NOT_IMPLEMENTED; break;
     620:	14 e0       	ldi	r17, 0x04	; 4
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:377
    default:
        ret = LW232_ERR_UNKNOWN_CMD;
    }

    return ret;
}
     622:	81 2f       	mov	r24, r17
     624:	0f 90       	pop	r0
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	bf 90       	pop	r11
     638:	af 90       	pop	r10
     63a:	9f 90       	pop	r9
     63c:	8f 90       	pop	r8
     63e:	08 95       	ret
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:160
    lw232LastErr = LW232_OK;

    switch (lw232Message[0]) {
        case LW232_CMD_SETUP:
        // Sn[CR] Setup with standard CAN bit-rates where n is 0-9.
        if (lw232CanChannelMode == LW232_STATUS_CAN_CLOSED) {
     640:	fc 01       	movw	r30, r24
     642:	15 89       	ldd	r17, Z+21	; 0x15
     644:	11 23       	and	r17, r17
     646:	11 f0       	breq	.+4      	; 0x64c <Can232::parseAndRunCommand()+0xda>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:170
            ret = LW232_ERR;
        }
        break;
        case LW232_CMD_SETUP_BTR:
        // sxxyy[CR] Setup with BTR0/BTR1 CAN bit-rates where xx and yy is a hex value.
        ret = LW232_ERR; break;
     648:	13 e0       	ldi	r17, 0x03	; 3
     64a:	eb cf       	rjmp	.-42     	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:161

    switch (lw232Message[0]) {
        case LW232_CMD_SETUP:
        // Sn[CR] Setup with standard CAN bit-rates where n is 0-9.
        if (lw232CanChannelMode == LW232_STATUS_CAN_CLOSED) {
            idx = HexHelper::parseNibbleWithLimit(lw232Message[1], LW232_CAN_BAUD_NUM);
     64c:	6a e0       	ldi	r22, 0x0A	; 10
     64e:	80 a5       	ldd	r24, Z+40	; 0x28
     650:	0e 94 b0 02 	call	0x560	; 0x560 <HexHelper::parseNibbleWithLimit(unsigned char, unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:162
			      lw232CanSpeedSelection = lw232CanBaudRates[idx];
     654:	e8 2f       	mov	r30, r24
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	e5 5e       	subi	r30, 0xE5	; 229
     65a:	fe 4f       	sbci	r31, 0xFE	; 254
     65c:	80 81       	ld	r24, Z
     65e:	f5 01       	movw	r30, r10
     660:	83 8b       	std	Z+19, r24	; 0x13
     662:	df cf       	rjmp	.-66     	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:185
            ret = LW232_ERR;
        }
        break;
        case LW232_CMD_LISTEN:
        // L[CR] Open the CAN channel in listen only mode (receiving).
        if (lw232CanChannelMode == LW232_STATUS_CAN_CLOSED) {
     664:	dc 01       	movw	r26, r24
     666:	55 96       	adiw	r26, 0x15	; 21
     668:	8c 91       	ld	r24, X
     66a:	81 11       	cpse	r24, r1
     66c:	ed cf       	rjmp	.-38     	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:186
            ret = openCanBus();
     66e:	c5 01       	movw	r24, r10
     670:	0e 94 09 01 	call	0x212	; 0x212 <Can232::openCanBus()>
     674:	18 2f       	mov	r17, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:187
            if (ret == LW232_OK) {
     676:	81 11       	cpse	r24, r1
     678:	d4 cf       	rjmp	.-88     	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:188
              lw232CanChannelMode = LW232_STATUS_CAN_OPEN_LISTEN;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	f5 01       	movw	r30, r10
     67e:	85 8b       	std	Z+21, r24	; 0x15
     680:	d0 cf       	rjmp	.-96     	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:197
            ret = LW232_ERR;
        }
        break;
        case LW232_CMD_CLOSE:
        // C[CR] Close the CAN channel.
        if (lw232CanChannelMode != LW232_STATUS_CAN_CLOSED) {
     682:	dc 01       	movw	r26, r24
     684:	55 96       	adiw	r26, 0x15	; 21
     686:	8c 91       	ld	r24, X
     688:	55 97       	sbiw	r26, 0x15	; 21
     68a:	88 23       	and	r24, r24
     68c:	e9 f2       	breq	.-70     	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:198
            lw232CanChannelMode = LW232_STATUS_CAN_CLOSED;
     68e:	55 96       	adiw	r26, 0x15	; 21
     690:	1c 92       	st	X, r1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:151
    }
    return 0;
}

INT8U Can232::parseAndRunCommand() {
    INT8U ret = LW232_OK;
     692:	10 e0       	ldi	r17, 0x00	; 0
     694:	c6 cf       	rjmp	.-116    	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:206
            ret = LW232_ERR;
        }
        break;
    case LW232_CMD_TX11:
        // tiiildd...[CR] Transmit a standard (11bit) CAN frame.
        if (lw232CanChannelMode == LW232_STATUS_CAN_OPEN_NORMAL) {
     696:	fc 01       	movw	r30, r24
     698:	85 89       	ldd	r24, Z+21	; 0x15
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	a9 f6       	brne	.-86     	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:207
            parseCanStdId();
     69e:	cd 01       	movw	r24, r26
     6a0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Can232::parseCanStdId()>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:208
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_STD_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
     6a4:	69 e0       	ldi	r22, 0x09	; 9
     6a6:	d5 01       	movw	r26, r10
     6a8:	9b 96       	adiw	r26, 0x2b	; 43
     6aa:	8c 91       	ld	r24, X
     6ac:	0e 94 b0 02 	call	0x560	; 0x560 <HexHelper::parseNibbleWithLimit(unsigned char, unsigned char)>
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f5 01       	movw	r30, r10
     6b4:	86 a3       	std	Z+38, r24	; 0x26
     6b6:	45 01       	movw	r8, r10
     6b8:	85 01       	movw	r16, r10
     6ba:	02 5e       	subi	r16, 0xE2	; 226
     6bc:	1f 4f       	sbci	r17, 0xFF	; 255
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:152
    return 0;
}

INT8U Can232::parseAndRunCommand() {
    INT8U ret = LW232_OK;
    INT8U idx = 0;
     6be:	f1 2c       	mov	r15, r1
     6c0:	68 01       	movw	r12, r16
     6c2:	f2 e0       	ldi	r31, 0x02	; 2
     6c4:	8f 0e       	add	r8, r31
     6c6:	91 1c       	adc	r9, r1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:209 (discriminator 2)
    case LW232_CMD_TX11:
        // tiiildd...[CR] Transmit a standard (11bit) CAN frame.
        if (lw232CanChannelMode == LW232_STATUS_CAN_OPEN_NORMAL) {
            parseCanStdId();
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_STD_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
            for (; idx < lw232PacketLen; idx++) {
     6c8:	ef 14       	cp	r14, r15
     6ca:	69 f0       	breq	.+26     	; 0x6e6 <Can232::parseAndRunCommand()+0x174>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:210 (discriminator 1)
                lw232Buffer[idx] = HexHelper::parseFullByte(lw232Message[LW232_OFFSET_STD_PKT_DATA + idx * 2], lw232Message[LW232_OFFSET_STD_PKT_DATA + idx * 2 + 1]);
     6cc:	d4 01       	movw	r26, r8
     6ce:	9b 96       	adiw	r26, 0x2b	; 43
     6d0:	6c 91       	ld	r22, X
     6d2:	9b 97       	sbiw	r26, 0x2b	; 43
     6d4:	9a 96       	adiw	r26, 0x2a	; 42
     6d6:	8c 91       	ld	r24, X
     6d8:	0e 94 a1 02 	call	0x542	; 0x542 <HexHelper::parseFullByte(unsigned char, unsigned char)>
     6dc:	f8 01       	movw	r30, r16
     6de:	81 93       	st	Z+, r24
     6e0:	8f 01       	movw	r16, r30
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:209 (discriminator 1)
    case LW232_CMD_TX11:
        // tiiildd...[CR] Transmit a standard (11bit) CAN frame.
        if (lw232CanChannelMode == LW232_STATUS_CAN_OPEN_NORMAL) {
            parseCanStdId();
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_STD_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
            for (; idx < lw232PacketLen; idx++) {
     6e2:	f3 94       	inc	r15
     6e4:	ee cf       	rjmp	.-36     	; 0x6c2 <Can232::parseAndRunCommand()+0x150>
_ZN6Can23210sendMsgBufEmhhhPh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:480
}


INT8U Can232::sendMsgBuf(INT32U id, INT8U ext, INT8U rtr, INT8U len, INT8U *buf) {
#ifndef _MCP_FAKE_MODE_
    return lw232CAN.sendMsgBuf(id, ext, rtr, len, buf);
     6e6:	d5 01       	movw	r26, r10
     6e8:	5a 96       	adiw	r26, 0x1a	; 26
     6ea:	4d 91       	ld	r20, X+
     6ec:	5d 91       	ld	r21, X+
     6ee:	6d 91       	ld	r22, X+
     6f0:	7c 91       	ld	r23, X
     6f2:	5d 97       	sbiw	r26, 0x1d	; 29
     6f4:	00 e0       	ldi	r16, 0x00	; 0
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	c5 01       	movw	r24, r10
     6fa:	02 96       	adiw	r24, 0x02	; 2
     6fc:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MCP_CAN::sendMsgBuf(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char*)>
_ZN6Can23218parseAndRunCommandEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:213
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_STD_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
            for (; idx < lw232PacketLen; idx++) {
                lw232Buffer[idx] = HexHelper::parseFullByte(lw232Message[LW232_OFFSET_STD_PKT_DATA + idx * 2], lw232Message[LW232_OFFSET_STD_PKT_DATA + idx * 2 + 1]);
            }
            INT8U mcpErr = sendMsgBuf(lw232CanId, 0, 0, lw232PacketLen, lw232Buffer);
            if (mcpErr != CAN_OK) {
     700:	81 11       	cpse	r24, r1
     702:	a2 cf       	rjmp	.-188    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:215
                ret = LW232_ERR;
            } else if (lw232AutoPoll) {
     704:	11 e0       	ldi	r17, 0x01	; 1
     706:	f5 01       	movw	r30, r10
     708:	80 8d       	ldd	r24, Z+24	; 0x18
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:248
            parseCanStdId();
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_STD_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
            if (CAN_OK != sendMsgBuf(lw232CanId, 0, 1, lw232PacketLen, lw232Buffer)) {
                ret = LW232_ERR;
            }
            else if (lw232AutoPoll) {
     70a:	81 11       	cpse	r24, r1
     70c:	8a cf       	rjmp	.-236    	; 0x622 <Can232::parseAndRunCommand()+0xb0>
     70e:	c1 cf       	rjmp	.-126    	; 0x692 <Can232::parseAndRunCommand()+0x120>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:225
            ret = LW232_ERR;
        }
        break;
    case LW232_CMD_TX29:
        // Tiiiiiiiildd...[CR] Transmit an extended (29bit) CAN frame
        if (lw232CanChannelMode == LW232_STATUS_CAN_OPEN_NORMAL) {
     710:	dc 01       	movw	r26, r24
     712:	55 96       	adiw	r26, 0x15	; 21
     714:	8c 91       	ld	r24, X
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	09 f0       	breq	.+2      	; 0x71c <Can232::parseAndRunCommand()+0x1aa>
     71a:	bb cf       	rjmp	.-138    	; 0x692 <Can232::parseAndRunCommand()+0x120>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:226
            parseCanExtId();
     71c:	c5 01       	movw	r24, r10
     71e:	0e 94 09 02 	call	0x412	; 0x412 <Can232::parseCanExtId()>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:227
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_EXT_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
     722:	69 e0       	ldi	r22, 0x09	; 9
     724:	f5 01       	movw	r30, r10
     726:	80 a9       	ldd	r24, Z+48	; 0x30
     728:	0e 94 b0 02 	call	0x560	; 0x560 <HexHelper::parseNibbleWithLimit(unsigned char, unsigned char)>
     72c:	e8 2e       	mov	r14, r24
     72e:	d5 01       	movw	r26, r10
     730:	96 96       	adiw	r26, 0x26	; 38
     732:	8c 93       	st	X, r24
     734:	45 01       	movw	r8, r10
     736:	85 01       	movw	r16, r10
     738:	02 5e       	subi	r16, 0xE2	; 226
     73a:	1f 4f       	sbci	r17, 0xFF	; 255
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:152
    return 0;
}

INT8U Can232::parseAndRunCommand() {
    INT8U ret = LW232_OK;
    INT8U idx = 0;
     73c:	f1 2c       	mov	r15, r1
     73e:	68 01       	movw	r12, r16
     740:	b2 e0       	ldi	r27, 0x02	; 2
     742:	8b 0e       	add	r8, r27
     744:	91 1c       	adc	r9, r1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:228 (discriminator 2)
    case LW232_CMD_TX29:
        // Tiiiiiiiildd...[CR] Transmit an extended (29bit) CAN frame
        if (lw232CanChannelMode == LW232_STATUS_CAN_OPEN_NORMAL) {
            parseCanExtId();
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_EXT_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
            for (; idx < lw232PacketLen; idx++) {
     746:	ef 14       	cp	r14, r15
     748:	51 f0       	breq	.+20     	; 0x75e <Can232::parseAndRunCommand()+0x1ec>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:229 (discriminator 1)
                lw232Buffer[idx] = HexHelper::parseFullByte(lw232Message[LW232_OFFSET_EXT_PKT_DATA + idx * 2], lw232Message[LW232_OFFSET_EXT_PKT_DATA + idx * 2 + 1]);
     74a:	f4 01       	movw	r30, r8
     74c:	60 a9       	ldd	r22, Z+48	; 0x30
     74e:	87 a5       	ldd	r24, Z+47	; 0x2f
     750:	0e 94 a1 02 	call	0x542	; 0x542 <HexHelper::parseFullByte(unsigned char, unsigned char)>
     754:	d8 01       	movw	r26, r16
     756:	8d 93       	st	X+, r24
     758:	8d 01       	movw	r16, r26
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:228 (discriminator 1)
    case LW232_CMD_TX29:
        // Tiiiiiiiildd...[CR] Transmit an extended (29bit) CAN frame
        if (lw232CanChannelMode == LW232_STATUS_CAN_OPEN_NORMAL) {
            parseCanExtId();
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_EXT_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
            for (; idx < lw232PacketLen; idx++) {
     75a:	f3 94       	inc	r15
     75c:	f1 cf       	rjmp	.-30     	; 0x740 <Can232::parseAndRunCommand()+0x1ce>
_ZN6Can23210sendMsgBufEmhhhPh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:480
}


INT8U Can232::sendMsgBuf(INT32U id, INT8U ext, INT8U rtr, INT8U len, INT8U *buf) {
#ifndef _MCP_FAKE_MODE_
    return lw232CAN.sendMsgBuf(id, ext, rtr, len, buf);
     75e:	f5 01       	movw	r30, r10
     760:	42 8d       	ldd	r20, Z+26	; 0x1a
     762:	53 8d       	ldd	r21, Z+27	; 0x1b
     764:	64 8d       	ldd	r22, Z+28	; 0x1c
     766:	75 8d       	ldd	r23, Z+29	; 0x1d
     768:	00 e0       	ldi	r16, 0x00	; 0
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	c5 01       	movw	r24, r10
     76e:	02 96       	adiw	r24, 0x02	; 2
     770:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MCP_CAN::sendMsgBuf(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char*)>
_ZN6Can23218parseAndRunCommandEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:231
            parseCanExtId();
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_EXT_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
            for (; idx < lw232PacketLen; idx++) {
                lw232Buffer[idx] = HexHelper::parseFullByte(lw232Message[LW232_OFFSET_EXT_PKT_DATA + idx * 2], lw232Message[LW232_OFFSET_EXT_PKT_DATA + idx * 2 + 1]);
            }
            if (CAN_OK != sendMsgBuf(lw232CanId, 1, 0, lw232PacketLen, lw232Buffer)) {
     774:	81 11       	cpse	r24, r1
     776:	68 cf       	rjmp	.-304    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:233
                ret = LW232_ERR;
            } else if (lw232AutoPoll) {
     778:	d5 01       	movw	r26, r10
     77a:	58 96       	adiw	r26, 0x18	; 24
     77c:	8c 91       	ld	r24, X
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:234
                ret = LW232_OK_BIG;
     77e:	12 e0       	ldi	r17, 0x02	; 2
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:233
            for (; idx < lw232PacketLen; idx++) {
                lw232Buffer[idx] = HexHelper::parseFullByte(lw232Message[LW232_OFFSET_EXT_PKT_DATA + idx * 2], lw232Message[LW232_OFFSET_EXT_PKT_DATA + idx * 2 + 1]);
            }
            if (CAN_OK != sendMsgBuf(lw232CanId, 1, 0, lw232PacketLen, lw232Buffer)) {
                ret = LW232_ERR;
            } else if (lw232AutoPoll) {
     780:	88 23       	and	r24, r24
     782:	09 f4       	brne	.+2      	; 0x786 <Can232::parseAndRunCommand()+0x214>
     784:	86 cf       	rjmp	.-244    	; 0x692 <Can232::parseAndRunCommand()+0x120>
     786:	4d cf       	rjmp	.-358    	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:242
            }
        }
        break;
    case LW232_CMD_RTR11:
        // riiil[CR] Transmit an standard RTR (11bit) CAN frame.
        if (lw232CanChannelMode == LW232_STATUS_CAN_OPEN_NORMAL) {
     788:	fc 01       	movw	r30, r24
     78a:	85 89       	ldd	r24, Z+21	; 0x15
     78c:	81 30       	cpi	r24, 0x01	; 1
     78e:	09 f0       	breq	.+2      	; 0x792 <Can232::parseAndRunCommand()+0x220>
     790:	5b cf       	rjmp	.-330    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:243
            parseCanStdId();
     792:	cd 01       	movw	r24, r26
     794:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Can232::parseCanStdId()>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:244
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_STD_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
     798:	69 e0       	ldi	r22, 0x09	; 9
     79a:	d5 01       	movw	r26, r10
     79c:	9b 96       	adiw	r26, 0x2b	; 43
     79e:	8c 91       	ld	r24, X
     7a0:	0e 94 b0 02 	call	0x560	; 0x560 <HexHelper::parseNibbleWithLimit(unsigned char, unsigned char)>
     7a4:	f5 01       	movw	r30, r10
     7a6:	86 a3       	std	Z+38, r24	; 0x26
_ZN6Can23210sendMsgBufEmhhhPh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:480
}


INT8U Can232::sendMsgBuf(INT32U id, INT8U ext, INT8U rtr, INT8U len, INT8U *buf) {
#ifndef _MCP_FAKE_MODE_
    return lw232CAN.sendMsgBuf(id, ext, rtr, len, buf);
     7a8:	42 8d       	ldd	r20, Z+26	; 0x1a
     7aa:	53 8d       	ldd	r21, Z+27	; 0x1b
     7ac:	64 8d       	ldd	r22, Z+28	; 0x1c
     7ae:	75 8d       	ldd	r23, Z+29	; 0x1d
     7b0:	65 01       	movw	r12, r10
     7b2:	fe e1       	ldi	r31, 0x1E	; 30
     7b4:	cf 0e       	add	r12, r31
     7b6:	d1 1c       	adc	r13, r1
     7b8:	e8 2e       	mov	r14, r24
     7ba:	01 e0       	ldi	r16, 0x01	; 1
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	c5 01       	movw	r24, r10
     7c0:	02 96       	adiw	r24, 0x02	; 2
     7c2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MCP_CAN::sendMsgBuf(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char*)>
_ZN6Can23218parseAndRunCommandEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:261
    case LW232_CMD_RTR29:
        // Riiiiiiiil[CR] Transmit an extended RTR (29bit) CAN frame.
        if (lw232CanChannelMode == LW232_STATUS_CAN_OPEN_NORMAL) {
            parseCanExtId();
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_EXT_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
            if (CAN_OK != sendMsgBuf(lw232CanId, 1, 1, lw232PacketLen, lw232Buffer)) {
     7c6:	81 11       	cpse	r24, r1
     7c8:	3f cf       	rjmp	.-386    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:248
            parseCanStdId();
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_STD_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
            if (CAN_OK != sendMsgBuf(lw232CanId, 0, 1, lw232PacketLen, lw232Buffer)) {
                ret = LW232_ERR;
            }
            else if (lw232AutoPoll) {
     7ca:	11 e0       	ldi	r17, 0x01	; 1
     7cc:	d5 01       	movw	r26, r10
     7ce:	58 96       	adiw	r26, 0x18	; 24
     7d0:	8c 91       	ld	r24, X
     7d2:	9b cf       	rjmp	.-202    	; 0x70a <Can232::parseAndRunCommand()+0x198>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:258
            ret = LW232_ERR;
        }
        break;
    case LW232_CMD_RTR29:
        // Riiiiiiiil[CR] Transmit an extended RTR (29bit) CAN frame.
        if (lw232CanChannelMode == LW232_STATUS_CAN_OPEN_NORMAL) {
     7d4:	fc 01       	movw	r30, r24
     7d6:	85 89       	ldd	r24, Z+21	; 0x15
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	09 f0       	breq	.+2      	; 0x7de <Can232::parseAndRunCommand()+0x26c>
     7dc:	35 cf       	rjmp	.-406    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:259
            parseCanExtId();
     7de:	cd 01       	movw	r24, r26
     7e0:	0e 94 09 02 	call	0x412	; 0x412 <Can232::parseCanExtId()>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:260
            lw232PacketLen = HexHelper::parseNibbleWithLimit(lw232Message[LW232_OFFSET_EXT_PKT_LEN], LW232_FRAME_MAX_LENGTH + 1);
     7e4:	69 e0       	ldi	r22, 0x09	; 9
     7e6:	d5 01       	movw	r26, r10
     7e8:	d0 96       	adiw	r26, 0x30	; 48
     7ea:	8c 91       	ld	r24, X
     7ec:	0e 94 b0 02 	call	0x560	; 0x560 <HexHelper::parseNibbleWithLimit(unsigned char, unsigned char)>
     7f0:	f5 01       	movw	r30, r10
     7f2:	86 a3       	std	Z+38, r24	; 0x26
_ZN6Can23210sendMsgBufEmhhhPh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:480
}


INT8U Can232::sendMsgBuf(INT32U id, INT8U ext, INT8U rtr, INT8U len, INT8U *buf) {
#ifndef _MCP_FAKE_MODE_
    return lw232CAN.sendMsgBuf(id, ext, rtr, len, buf);
     7f4:	42 8d       	ldd	r20, Z+26	; 0x1a
     7f6:	53 8d       	ldd	r21, Z+27	; 0x1b
     7f8:	64 8d       	ldd	r22, Z+28	; 0x1c
     7fa:	75 8d       	ldd	r23, Z+29	; 0x1d
     7fc:	65 01       	movw	r12, r10
     7fe:	fe e1       	ldi	r31, 0x1E	; 30
     800:	cf 0e       	add	r12, r31
     802:	d1 1c       	adc	r13, r1
     804:	e8 2e       	mov	r14, r24
     806:	01 e0       	ldi	r16, 0x01	; 1
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	d9 cf       	rjmp	.-78     	; 0x7be <Can232::parseAndRunCommand()+0x24c>
_ZN6Can23218parseAndRunCommandEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:273
            ret = LW232_ERR;
        }
        break;
    case LW232_CMD_POLL_ONE:
        // P[CR] Poll incomming FIFO for CAN frames (single poll)
        if (lw232CanChannelMode != LW232_STATUS_CAN_CLOSED && lw232AutoPoll == LW232_AUTOPOLL_OFF) {
     80c:	fc 01       	movw	r30, r24
     80e:	85 89       	ldd	r24, Z+21	; 0x15
     810:	88 23       	and	r24, r24
     812:	09 f4       	brne	.+2      	; 0x816 <Can232::parseAndRunCommand()+0x2a4>
     814:	19 cf       	rjmp	.-462    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:273 (discriminator 1)
     816:	80 8d       	ldd	r24, Z+24	; 0x18
     818:	81 11       	cpse	r24, r1
     81a:	16 cf       	rjmp	.-468    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
_ZN6Can23212checkReceiveEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:381
    return ret;
}

INT8U Can232::checkReceive() {
#ifndef _MCP_FAKE_MODE_
    return lw232CAN.checkReceive();
     81c:	cd 01       	movw	r24, r26
     81e:	02 96       	adiw	r24, 0x02	; 2
     820:	0e 94 e6 09 	call	0x13cc	; 0x13cc <MCP_CAN::checkReceive()>
_ZN6Can23218parseAndRunCommandEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:274
        }
        break;
    case LW232_CMD_POLL_ONE:
        // P[CR] Poll incomming FIFO for CAN frames (single poll)
        if (lw232CanChannelMode != LW232_STATUS_CAN_CLOSED && lw232AutoPoll == LW232_AUTOPOLL_OFF) {
            if (CAN_MSGAVAIL == checkReceive()) {
     824:	83 30       	cpi	r24, 0x03	; 3
     826:	09 f0       	breq	.+2      	; 0x82a <Can232::parseAndRunCommand()+0x2b8>
     828:	34 cf       	rjmp	.-408    	; 0x692 <Can232::parseAndRunCommand()+0x120>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:275
                ret = receiveSingleFrame();
     82a:	c5 01       	movw	r24, r10
     82c:	0e 94 2c 01 	call	0x258	; 0x258 <Can232::receiveSingleFrame()>
     830:	18 2f       	mov	r17, r24
     832:	f7 ce       	rjmp	.-530    	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:283
            ret = LW232_ERR;
        }
        break;
    case LW232_CMD_POLL_MANY:
        // A[CR] Polls incomming FIFO for CAN frames (all pending frames)
        if (lw232CanChannelMode != LW232_STATUS_CAN_CLOSED && lw232AutoPoll == LW232_AUTOPOLL_OFF) {
     834:	dc 01       	movw	r26, r24
     836:	55 96       	adiw	r26, 0x15	; 21
     838:	8c 91       	ld	r24, X
     83a:	55 97       	sbiw	r26, 0x15	; 21
     83c:	88 23       	and	r24, r24
     83e:	09 f4       	brne	.+2      	; 0x842 <Can232::parseAndRunCommand()+0x2d0>
     840:	03 cf       	rjmp	.-506    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:283 (discriminator 1)
     842:	58 96       	adiw	r26, 0x18	; 24
     844:	1c 91       	ld	r17, X
     846:	11 11       	cpse	r17, r1
     848:	ff ce       	rjmp	.-514    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
_ZN6Can23212checkReceiveEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:381
    return ret;
}

INT8U Can232::checkReceive() {
#ifndef _MCP_FAKE_MODE_
    return lw232CAN.checkReceive();
     84a:	75 01       	movw	r14, r10
     84c:	b2 e0       	ldi	r27, 0x02	; 2
     84e:	eb 0e       	add	r14, r27
     850:	f1 1c       	adc	r15, r1
     852:	c7 01       	movw	r24, r14
     854:	0e 94 e6 09 	call	0x13cc	; 0x13cc <MCP_CAN::checkReceive()>
_ZN6Can23218parseAndRunCommandEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:284
        }
        break;
    case LW232_CMD_POLL_MANY:
        // A[CR] Polls incomming FIFO for CAN frames (all pending frames)
        if (lw232CanChannelMode != LW232_STATUS_CAN_CLOSED && lw232AutoPoll == LW232_AUTOPOLL_OFF) {
            while (CAN_MSGAVAIL == checkReceive()) {
     858:	83 30       	cpi	r24, 0x03	; 3
     85a:	81 f4       	brne	.+32     	; 0x87c <Can232::parseAndRunCommand()+0x30a>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:285
                ret = ret ^ receiveSingleFrame();
     85c:	c5 01       	movw	r24, r10
     85e:	0e 94 2c 01 	call	0x258	; 0x258 <Can232::receiveSingleFrame()>
     862:	08 2f       	mov	r16, r24
     864:	01 27       	eor	r16, r17
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:286
                if (ret != CAN_OK)
     866:	81 13       	cpse	r24, r17
     868:	08 c0       	rjmp	.+16     	; 0x87a <Can232::parseAndRunCommand()+0x308>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:288
                    break;
                Serial.write(LW232_CR);
     86a:	6d e0       	ldi	r22, 0x0D	; 13
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	8d e5       	ldi	r24, 0x5D	; 93
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 bd 00 	call	0x17a	; 0x17a <HardwareSerial::write(int)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:285
        break;
    case LW232_CMD_POLL_MANY:
        // A[CR] Polls incomming FIFO for CAN frames (all pending frames)
        if (lw232CanChannelMode != LW232_STATUS_CAN_CLOSED && lw232AutoPoll == LW232_AUTOPOLL_OFF) {
            while (CAN_MSGAVAIL == checkReceive()) {
                ret = ret ^ receiveSingleFrame();
     876:	10 2f       	mov	r17, r16
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:284
        }
        break;
    case LW232_CMD_POLL_MANY:
        // A[CR] Polls incomming FIFO for CAN frames (all pending frames)
        if (lw232CanChannelMode != LW232_STATUS_CAN_CLOSED && lw232AutoPoll == LW232_AUTOPOLL_OFF) {
            while (CAN_MSGAVAIL == checkReceive()) {
     878:	ec cf       	rjmp	.-40     	; 0x852 <Can232::parseAndRunCommand()+0x2e0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:285
                ret = ret ^ receiveSingleFrame();
     87a:	10 2f       	mov	r17, r16
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:290
                if (ret != CAN_OK)
                    break;
                Serial.write(LW232_CR);
            }
            if (ret == CAN_OK)
     87c:	11 11       	cpse	r17, r1
     87e:	d1 ce       	rjmp	.-606    	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:291
                Serial.print(LW232_ALL);
     880:	61 e4       	ldi	r22, 0x41	; 65
     882:	8d e5       	ldi	r24, 0x5D	; 93
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <Print::print(char)>
     88a:	cb ce       	rjmp	.-618    	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:299
        }
        break;
    case LW232_CMD_FLAGS:
        // F[CR] Read Status Flags.
        // LAWICEL CAN232 and CANUSB have some specific errors which differ from MCP2515/MCP2551 errors. We just return MCP2515 error.
        Serial.print(LW232_FLAG);
     88c:	66 e4       	ldi	r22, 0x46	; 70
     88e:	8d e5       	ldi	r24, 0x5D	; 93
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <Print::print(char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:300
        if (lw232CAN.checkError(&err) == CAN_OK) 
     896:	be 01       	movw	r22, r28
     898:	6f 5f       	subi	r22, 0xFF	; 255
     89a:	7f 4f       	sbci	r23, 0xFF	; 255
     89c:	c5 01       	movw	r24, r10
     89e:	02 96       	adiw	r24, 0x02	; 2
     8a0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <MCP_CAN::checkError(unsigned char*)>
     8a4:	81 11       	cpse	r24, r1
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <Can232::parseAndRunCommand()+0x338>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:301
            err = 0;
     8a8:	19 82       	std	Y+1, r1	; 0x01
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:302
        HexHelper::printFullByte(err & MCP_EFLG_ERRORMASK);
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	88 7f       	andi	r24, 0xF8	; 248
     8ae:	0e 94 12 01 	call	0x224	; 0x224 <HexHelper::printFullByte(unsigned char)>
     8b2:	ef ce       	rjmp	.-546    	; 0x692 <Can232::parseAndRunCommand()+0x120>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:306
        break;
    case LW232_CMD_AUTOPOLL:
        // Xn[CR] Sets Auto Poll/Send ON/OFF for received frames.
        if (lw232CanChannelMode == LW232_STATUS_CAN_CLOSED) {
     8b4:	fc 01       	movw	r30, r24
     8b6:	15 89       	ldd	r17, Z+21	; 0x15
     8b8:	11 11       	cpse	r17, r1
     8ba:	c6 ce       	rjmp	.-628    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:307
            lw232AutoPoll = (lw232Message[1] == LW232_ON_ONE) ? LW232_AUTOPOLL_ON : LW232_AUTOPOLL_OFF;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 a5       	ldd	r25, Z+40	; 0x28
     8c0:	91 33       	cpi	r25, 0x31	; 49
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <Can232::parseAndRunCommand()+0x354>
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	d5 01       	movw	r26, r10
     8c8:	58 96       	adiw	r26, 0x18	; 24
     8ca:	8c 93       	st	X, r24
     8cc:	aa ce       	rjmp	.-684    	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:324
    case LW232_CMD_ACC_MASK:
        // mxxxxxxxx[CR] Sets Acceptance Mask Register (AMn Register of SJA1000).
        ret = LW232_ERR_NOT_IMPLEMENTED; break;
    case LW232_CMD_UART:
        // Un[CR] Setup UART with a new baud rate where n is 0-6.
        idx = HexHelper::parseNibbleWithLimit(lw232Message[1], LW232_UART_BAUD_NUM);
     8ce:	67 e0       	ldi	r22, 0x07	; 7
     8d0:	fc 01       	movw	r30, r24
     8d2:	80 a5       	ldd	r24, Z+40	; 0x28
     8d4:	0e 94 b0 02 	call	0x560	; 0x560 <HexHelper::parseNibbleWithLimit(unsigned char, unsigned char)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:325
        Serial.begin(lw232SerialBaudRates[idx]);
     8d8:	94 e0       	ldi	r25, 0x04	; 4
     8da:	89 9f       	mul	r24, r25
     8dc:	f0 01       	movw	r30, r0
     8de:	11 24       	eor	r1, r1
     8e0:	eb 5d       	subi	r30, 0xDB	; 219
     8e2:	fe 4f       	sbci	r31, 0xFE	; 254
_ZN14HardwareSerial5beginEm():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     8e4:	40 81       	ld	r20, Z
     8e6:	51 81       	ldd	r21, Z+1	; 0x01
     8e8:	62 81       	ldd	r22, Z+2	; 0x02
     8ea:	73 81       	ldd	r23, Z+3	; 0x03
     8ec:	26 e0       	ldi	r18, 0x06	; 6
     8ee:	8d e5       	ldi	r24, 0x5D	; 93
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 a7 0c 	call	0x194e	; 0x194e <HardwareSerial::begin(unsigned long, unsigned char)>
     8f6:	cd ce       	rjmp	.-614    	; 0x692 <Can232::parseAndRunCommand()+0x120>
_ZN6Can23218parseAndRunCommandEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:330
        break;
    case LW232_CMD_VERSION1:
    case LW232_CMD_VERSION2:
        // V[CR] Get Version number of both CAN232 hardware and software
        Serial.print(LW232_LAWICEL_VERSION_STR);
     8f8:	6f e0       	ldi	r22, 0x0F	; 15
     8fa:	71 e0       	ldi	r23, 0x01	; 1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:334
        break;
    case LW232_CMD_SERIAL:
        // N[CR] Get Serial number of the CAN232.
        Serial.print(LW232_LAWICEL_SERIAL_NUM);
     8fc:	8d e5       	ldi	r24, 0x5D	; 93
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <Print::print(char const*)>
     904:	c6 ce       	rjmp	.-628    	; 0x692 <Can232::parseAndRunCommand()+0x120>
     906:	65 e1       	ldi	r22, 0x15	; 21
     908:	71 e0       	ldi	r23, 0x01	; 1
     90a:	f8 cf       	rjmp	.-16     	; 0x8fc <Can232::parseAndRunCommand()+0x38a>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:338
        break;
    case LW232_CMD_TIMESTAMP:
        // Zn[CR] Sets Time Stamp ON/OFF for received frames only. Z0 - OFF, Z1 - Lawicel's timestamp 2 bytes, Z2 - arduino timestamp 4 bytes.
        if (lw232CanChannelMode == LW232_STATUS_CAN_CLOSED) {
     90c:	dc 01       	movw	r26, r24
     90e:	55 96       	adiw	r26, 0x15	; 21
     910:	1c 91       	ld	r17, X
     912:	55 97       	sbiw	r26, 0x15	; 21
     914:	11 11       	cpse	r17, r1
     916:	98 ce       	rjmp	.-720    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:340
            // lw232TimeStamp = (lw232Message[1] == LW232_ON_ONE); 
            if (lw232Message[1] == LW232_ON_ONE) {
     918:	98 96       	adiw	r26, 0x28	; 40
     91a:	8c 91       	ld	r24, X
     91c:	98 97       	sbiw	r26, 0x28	; 40
     91e:	81 33       	cpi	r24, 0x31	; 49
     920:	21 f4       	brne	.+8      	; 0x92a <Can232::parseAndRunCommand()+0x3b8>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:341
                lw232TimeStamp = LW232_TIMESTAMP_ON_NORMAL;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	59 96       	adiw	r26, 0x19	; 25
     926:	8c 93       	st	X, r24
     928:	7c ce       	rjmp	.-776    	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:343
            }
            else if (lw232Message[1] == LW232_ON_TWO) {
     92a:	82 33       	cpi	r24, 0x32	; 50
     92c:	21 f4       	brne	.+8      	; 0x936 <Can232::parseAndRunCommand()+0x3c4>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:344
                lw232TimeStamp = LW232_TIMESTAMP_ON_EXTENDED;
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	f5 01       	movw	r30, r10
     932:	81 8f       	std	Z+25, r24	; 0x19
     934:	76 ce       	rjmp	.-788    	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:347
            }
            else {
                lw232TimeStamp = LW232_TIMESTAMP_OFF;
     936:	59 96       	adiw	r26, 0x19	; 25
     938:	1c 92       	st	X, r1
     93a:	73 ce       	rjmp	.-794    	; 0x622 <Can232::parseAndRunCommand()+0xb0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:356
            ret = LW232_ERR;
        }
        break;
    case LW232_CMD_AUTOSTART:
        // Qn[CR] Auto Startup feature (from power on).
        if (lw232CanChannelMode != LW232_STATUS_CAN_CLOSED) {
     93c:	fc 01       	movw	r30, r24
     93e:	85 89       	ldd	r24, Z+21	; 0x15
     940:	88 23       	and	r24, r24
     942:	09 f4       	brne	.+2      	; 0x946 <Can232::parseAndRunCommand()+0x3d4>
     944:	81 ce       	rjmp	.-766    	; 0x648 <Can232::parseAndRunCommand()+0xd6>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:357
            if (lw232Message[1] == LW232_ON_ONE) {
     946:	80 a5       	ldd	r24, Z+40	; 0x28
     948:	81 33       	cpi	r24, 0x31	; 49
     94a:	19 f4       	brne	.+6      	; 0x952 <Can232::parseAndRunCommand()+0x3e0>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:358
                lw232AutoStart = LW232_AUTOSTART_ON_NORMAL;
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	87 8b       	std	Z+23, r24	; 0x17
     950:	a0 ce       	rjmp	.-704    	; 0x692 <Can232::parseAndRunCommand()+0x120>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:360
            }
            else if (lw232Message[1] == LW232_ON_TWO) {
     952:	82 33       	cpi	r24, 0x32	; 50
     954:	21 f4       	brne	.+8      	; 0x95e <Can232::parseAndRunCommand()+0x3ec>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:361
                lw232AutoStart = LW232_AUTOSTART_ON_LISTEN;
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	57 96       	adiw	r26, 0x17	; 23
     95a:	8c 93       	st	X, r24
     95c:	9a ce       	rjmp	.-716    	; 0x692 <Can232::parseAndRunCommand()+0x120>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:364
            }
            else {
                lw232AutoStart = LW232_AUTOSTART_OFF;
     95e:	17 8a       	std	Z+23, r1	; 0x17
     960:	98 ce       	rjmp	.-720    	; 0x692 <Can232::parseAndRunCommand()+0x120>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:373
        else {
            ret = LW232_ERR;
        }
        break;
    default:
        ret = LW232_ERR_UNKNOWN_CMD;
     962:	15 e0       	ldi	r17, 0x05	; 5
     964:	5e ce       	rjmp	.-836    	; 0x622 <Can232::parseAndRunCommand()+0xb0>

00000966 <Can232::exec()>:
_ZN6Can2324execEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:124
            stringComplete = true;
        }
    }
}

INT8U Can232::exec() {
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	ec 01       	movw	r28, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:126
    // dbg2("Command received:", inputString);
    lw232LastErr = parseAndRunCommand();
     96c:	0e 94 b9 02 	call	0x572	; 0x572 <Can232::parseAndRunCommand()>
     970:	8e 8b       	std	Y+22, r24	; 0x16
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:127
    switch (lw232LastErr) {
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	41 f0       	breq	.+16     	; 0x986 <Can232::exec()+0x20>
     976:	68 f0       	brcs	.+26     	; 0x992 <Can232::exec()+0x2c>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:141
        Serial.write(LW232_RET_ASCII_OK_BIG);
        Serial.write(LW232_RET_ASCII_OK);
        break;
    case LW232_ERR_NOT_IMPLEMENTED:
        // Choose behavior: will it fail or not when not implemented command comes in. Some can monitors might be affected by this selection.
        Serial.write(LW232_RET_ASCII_ERROR);
     978:	67 e0       	ldi	r22, 0x07	; 7
     97a:	70 e0       	ldi	r23, 0x00	; 0
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:127
}

INT8U Can232::exec() {
    // dbg2("Command received:", inputString);
    lw232LastErr = parseAndRunCommand();
    switch (lw232LastErr) {
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	59 f4       	brne	.+22     	; 0x996 <Can232::exec()+0x30>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:136
    case LW232_OK_SMALL:
        Serial.write(LW232_RET_ASCII_OK_SMALL);
        Serial.write(LW232_RET_ASCII_OK);
        break;
    case LW232_OK_BIG:
        Serial.write(LW232_RET_ASCII_OK_BIG);
     980:	6a e5       	ldi	r22, 0x5A	; 90
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	02 c0       	rjmp	.+4      	; 0x98a <Can232::exec()+0x24>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:132
    switch (lw232LastErr) {
    case LW232_OK:
        Serial.write(LW232_RET_ASCII_OK);
        break;
    case LW232_OK_SMALL:
        Serial.write(LW232_RET_ASCII_OK_SMALL);
     986:	6a e7       	ldi	r22, 0x7A	; 122
     988:	70 e0       	ldi	r23, 0x00	; 0
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:136
        Serial.write(LW232_RET_ASCII_OK);
        break;
    case LW232_OK_BIG:
        Serial.write(LW232_RET_ASCII_OK_BIG);
     98a:	8d e5       	ldi	r24, 0x5D	; 93
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 bd 00 	call	0x17a	; 0x17a <HardwareSerial::write(int)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:137
        Serial.write(LW232_RET_ASCII_OK);
     992:	6d e0       	ldi	r22, 0x0D	; 13
     994:	70 e0       	ldi	r23, 0x00	; 0
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:141
        break;
    case LW232_ERR_NOT_IMPLEMENTED:
        // Choose behavior: will it fail or not when not implemented command comes in. Some can monitors might be affected by this selection.
        Serial.write(LW232_RET_ASCII_ERROR);
     996:	8d e5       	ldi	r24, 0x5D	; 93
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 bd 00 	call	0x17a	; 0x17a <HardwareSerial::write(int)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:148
        break;
    default:
        Serial.write(LW232_RET_ASCII_ERROR);
    }
    return 0;
}
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <Can232::loopFunc()>:
_ZN6Can2328loopFuncEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:92

void Can232::setFilterFunc(INT8U (*userFunc)(INT32U)) {
    instance()->userAddressFilterFunc = userFunc;
}

void Can232::loopFunc() {
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ec 01       	movw	r28, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:93
    if (stringComplete) {
     9b4:	8c 01       	movw	r16, r24
     9b6:	06 5b       	subi	r16, 0xB6	; 182
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ba:	f8 01       	movw	r30, r16
     9bc:	80 81       	ld	r24, Z
     9be:	88 23       	and	r24, r24
     9c0:	d9 f0       	breq	.+54     	; 0x9f8 <Can232::loopFunc()+0x52>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:95
        int len = inputString.length();
        if (len > 0 && len < LW232_FRAME_MAX_SIZE) {
     9c2:	32 97       	sbiw	r30, 0x02	; 2
     9c4:	80 81       	ld	r24, Z
     9c6:	91 81       	ldd	r25, Z+1	; 0x01
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	9e 01       	movw	r18, r28
     9cc:	2c 5b       	subi	r18, 0xBC	; 188
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	79 01       	movw	r14, r18
     9d2:	4c 97       	sbiw	r24, 0x1c	; 28
     9d4:	50 f4       	brcc	.+20     	; 0x9ea <Can232::loopFunc()+0x44>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:96
            strcpy((char*)lw232Message, inputString.c_str());
     9d6:	f9 01       	movw	r30, r18
     9d8:	60 81       	ld	r22, Z
     9da:	71 81       	ldd	r23, Z+1	; 0x01
     9dc:	ce 01       	movw	r24, r28
     9de:	87 96       	adiw	r24, 0x27	; 39
     9e0:	0e 94 8d 11 	call	0x231a	; 0x231a <strcpy>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:97
            exec();
     9e4:	ce 01       	movw	r24, r28
     9e6:	0e 94 b3 04 	call	0x966	; 0x966 <Can232::exec()>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:100
        }
        // clear the string:
        inputString = "";
     9ea:	64 e1       	ldi	r22, 0x14	; 20
     9ec:	71 e0       	ldi	r23, 0x01	; 1
     9ee:	c7 01       	movw	r24, r14
     9f0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <String::operator=(char const*)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:101
        stringComplete = false;
     9f4:	f8 01       	movw	r30, r16
     9f6:	10 82       	st	Z, r1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:103
    }
    if (lw232CanChannelMode != LW232_STATUS_CAN_CLOSED) {
     9f8:	8d 89       	ldd	r24, Y+21	; 0x15
     9fa:	88 23       	and	r24, r24
     9fc:	21 f1       	breq	.+72     	; 0xa46 <Can232::loopFunc()+0xa0>
     9fe:	06 e0       	ldi	r16, 0x06	; 6
     a00:	10 e0       	ldi	r17, 0x00	; 0
_ZN6Can23212checkReceiveEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:381
    return ret;
}

INT8U Can232::checkReceive() {
#ifndef _MCP_FAKE_MODE_
    return lw232CAN.checkReceive();
     a02:	7e 01       	movw	r14, r28
     a04:	f2 e0       	ldi	r31, 0x02	; 2
     a06:	ef 0e       	add	r14, r31
     a08:	f1 1c       	adc	r15, r1
     a0a:	c7 01       	movw	r24, r14
     a0c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <MCP_CAN::checkReceive()>
_ZN6Can2328loopFuncEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:105
        inputString = "";
        stringComplete = false;
    }
    if (lw232CanChannelMode != LW232_STATUS_CAN_CLOSED) {
        int recv = 0;
        while (CAN_MSGAVAIL == checkReceive() && recv++<5) {
     a10:	83 30       	cpi	r24, 0x03	; 3
     a12:	79 f4       	brne	.+30     	; 0xa32 <Can232::loopFunc()+0x8c>
     a14:	01 50       	subi	r16, 0x01	; 1
     a16:	11 09       	sbc	r17, r1
     a18:	61 f0       	breq	.+24     	; 0xa32 <Can232::loopFunc()+0x8c>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:107
            // dbg0('+');
            if (CAN_OK == receiveSingleFrame()) {
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 94 2c 01 	call	0x258	; 0x258 <Can232::receiveSingleFrame()>
     a20:	81 11       	cpse	r24, r1
     a22:	f3 cf       	rjmp	.-26     	; 0xa0a <Can232::loopFunc()+0x64>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:108
                Serial.write(LW232_CR);
     a24:	6d e0       	ldi	r22, 0x0D	; 13
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	8d e5       	ldi	r24, 0x5D	; 93
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 bd 00 	call	0x17a	; 0x17a <HardwareSerial::write(int)>
     a30:	ec cf       	rjmp	.-40     	; 0xa0a <Can232::loopFunc()+0x64>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:111
            }
        }
        Serial.flush();
     a32:	8d e5       	ldi	r24, 0x5D	; 93
     a34:	91 e0       	ldi	r25, 0x01	; 1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:113
    }
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:111
            // dbg0('+');
            if (CAN_OK == receiveSingleFrame()) {
                Serial.write(LW232_CR);
            }
        }
        Serial.flush();
     a42:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <HardwareSerial::flush()>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:113
    }
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	08 95       	ret

00000a54 <Can232::loop()>:
_ZN6Can2324loopEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:66
void Can232::setFilter(INT8U (*userFunc)(INT32U)) {
    instance()->setFilterFunc(userFunc);
}

void Can232::loop() {
    instance()->loopFunc();
     a54:	0e 94 c4 00 	call	0x188	; 0x188 <Can232::instance()>
     a58:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <Can232::loopFunc()>

00000a5c <Can232::initFunc()>:
_ZN6Can2328initFuncEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:73

void Can232::serialEvent() {
    instance()->serialEventFunc();
}

void Can232::initFunc() {
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:74
    if (!inputString.reserve(LW232_INPUT_STRING_BUFFER_SIZE)) {
     a66:	8c 01       	movw	r16, r24
     a68:	0c 5b       	subi	r16, 0xBC	; 188
     a6a:	1f 4f       	sbci	r17, 0xFF	; 255
     a6c:	68 ec       	ldi	r22, 0xC8	; 200
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	c8 01       	movw	r24, r16
     a72:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <String::reserve(unsigned int)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:82
    // lw232AutoStart = true; //todo: read from eeprom
    // lw232AutoPoll = false; //todo: read from eeprom
    //  lw232TimeStamp = //read from eeprom
    //    lw232Message[0] = 'Z';    lw232Message[1] = '1'; exec();
    //if (lw232AutoStart) {
        inputString = "O\0x0D";
     a76:	66 e0       	ldi	r22, 0x06	; 6
     a78:	71 e0       	ldi	r23, 0x01	; 1
     a7a:	c8 01       	movw	r24, r16
     a7c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <String::operator=(char const*)>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:83
        stringComplete = true;
     a80:	fe 01       	movw	r30, r28
     a82:	e6 5b       	subi	r30, 0xB6	; 182
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	80 83       	st	Z, r24
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:84
        loopFunc();
     a8a:	ce 01       	movw	r24, r28
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:86
    //}
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:84
    //  lw232TimeStamp = //read from eeprom
    //    lw232Message[0] = 'Z';    lw232Message[1] = '1'; exec();
    //if (lw232AutoStart) {
        inputString = "O\0x0D";
        stringComplete = true;
        loopFunc();
     a94:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <Can232::loopFunc()>

00000a98 <Can232::init(unsigned char, unsigned char)>:
_ZN6Can2324initEhh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:52
    if (_instance == 0)
        _instance = new Can232();
    return _instance;
}

void Can232::init(INT8U defaultCanSpeed, const INT8U clock) {
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	d8 2f       	mov	r29, r24
     a9e:	c6 2f       	mov	r28, r22
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:56
    // dbg_begin(LW232_DEFAULT_BAUD_RATE); // logging through software serial 
    // dbg1("CAN ASCII. Welcome to debug");

    instance()->lw232CanSpeedSelection = defaultCanSpeed;
     aa0:	0e 94 c4 00 	call	0x188	; 0x188 <Can232::instance()>
     aa4:	fc 01       	movw	r30, r24
     aa6:	d3 8b       	std	Z+19, r29	; 0x13
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:57
    instance()->lw232McpModuleClock = clock;
     aa8:	0e 94 c4 00 	call	0x188	; 0x188 <Can232::instance()>
     aac:	fc 01       	movw	r30, r24
     aae:	c4 8b       	std	Z+20, r28	; 0x14
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:58
    instance()->initFunc();
     ab0:	0e 94 c4 00 	call	0x188	; 0x188 <Can232::instance()>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:59
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:58
    // dbg_begin(LW232_DEFAULT_BAUD_RATE); // logging through software serial 
    // dbg1("CAN ASCII. Welcome to debug");

    instance()->lw232CanSpeedSelection = defaultCanSpeed;
    instance()->lw232McpModuleClock = clock;
    instance()->initFunc();
     ab8:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <Can232::initFunc()>

00000abc <Can232::serialEventFunc()>:
_ZN6Can23215serialEventFuncEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:114
            }
        }
        Serial.flush();
    }
}
void Can232::serialEventFunc() {
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:117
    while (Serial.available()) {
        char inChar = (char)Serial.read();
        inputString += inChar;
     ac8:	7c 01       	movw	r14, r24
     aca:	24 e4       	ldi	r18, 0x44	; 68
     acc:	e2 0e       	add	r14, r18
     ace:	f1 1c       	adc	r15, r1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:119
        if (inChar == LW232_CR) {
            stringComplete = true;
     ad0:	ec 01       	movw	r28, r24
     ad2:	c6 5b       	subi	r28, 0xB6	; 182
     ad4:	df 4f       	sbci	r29, 0xFF	; 255
     ad6:	01 e0       	ldi	r16, 0x01	; 1
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:115
        }
        Serial.flush();
    }
}
void Can232::serialEventFunc() {
    while (Serial.available()) {
     ad8:	8d e5       	ldi	r24, 0x5D	; 93
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	0e 94 c7 0b 	call	0x178e	; 0x178e <HardwareSerial::available()>
     ae0:	89 2b       	or	r24, r25
     ae2:	69 f0       	breq	.+26     	; 0xafe <Can232::serialEventFunc()+0x42>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:116
        char inChar = (char)Serial.read();
     ae4:	8d e5       	ldi	r24, 0x5D	; 93
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <HardwareSerial::read()>
     aec:	18 2f       	mov	r17, r24
_ZN6StringpLEc():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:115

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
  String & operator += (char c)     {concat(c); return (*this);}
     aee:	68 2f       	mov	r22, r24
     af0:	c7 01       	movw	r24, r14
     af2:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <String::concat(char)>
_ZN6Can23215serialEventFuncEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:118
        inputString += inChar;
        if (inChar == LW232_CR) {
     af6:	1d 30       	cpi	r17, 0x0D	; 13
     af8:	79 f7       	brne	.-34     	; 0xad8 <Can232::serialEventFunc()+0x1c>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:119
            stringComplete = true;
     afa:	08 83       	st	Y, r16
     afc:	ed cf       	rjmp	.-38     	; 0xad8 <Can232::serialEventFunc()+0x1c>
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:122
        }
    }
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <Can232::serialEvent()>:
_ZN6Can23211serialEventEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/can-232.cpp:70
void Can232::loop() {
    instance()->loopFunc();
}

void Can232::serialEvent() {
    instance()->serialEventFunc();
     b0c:	0e 94 c4 00 	call	0x188	; 0x188 <Can232::instance()>
     b10:	0c 94 5e 05 	jmp	0xabc	; 0xabc <Can232::serialEventFunc()>

00000b14 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/mcp_can.cpp:1063
** Descriptions:            when receive something ,u can check if it was a request
*********************************************************************************************************/
INT8U MCP_CAN::isRemoteRequest(void)
{
    return m_nRtr;
} 
     b14:	8f b9       	out	0x0f, r24	; 15
     b16:	00 00       	nop
     b18:	77 9b       	sbis	0x0e, 7	; 14
     b1a:	fe cf       	rjmp	.-4      	; 0xb18 <SPIClass::transfer(unsigned char)+0x4>
     b1c:	8f b1       	in	r24, 0x0f	; 15
     b1e:	08 95       	ret

00000b20 <MCP_CAN::mcp2515_reset()>:
_ZN7MCP_CAN13mcp2515_resetEv():
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	ec 01       	movw	r28, r24
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	88 89       	ldd	r24, Y+16	; 0x10
     b2a:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
     b2e:	80 ec       	ldi	r24, 0xC0	; 192
     b30:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	88 89       	ldd	r24, Y+16	; 0x10
     b38:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
     b3c:	6a e0       	ldi	r22, 0x0A	; 10
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <delay>

00000b4c <MCP_CAN::mcp2515_readRegister(unsigned char)>:
_ZN7MCP_CAN20mcp2515_readRegisterEh():
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	ec 01       	movw	r28, r24
     b54:	16 2f       	mov	r17, r22
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	88 89       	ldd	r24, Y+16	; 0x10
     b5a:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     b64:	81 2f       	mov	r24, r17
     b66:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     b70:	18 2f       	mov	r17, r24
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	88 89       	ldd	r24, Y+16	; 0x10
     b76:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
     b7a:	81 2f       	mov	r24, r17
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	08 95       	ret

00000b84 <MCP_CAN::mcp2515_readRegisterS(unsigned char, unsigned char*, unsigned char)>:
_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh():
     b84:	df 92       	push	r13
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	7c 01       	movw	r14, r24
     b94:	16 2f       	mov	r17, r22
     b96:	d4 2e       	mov	r13, r20
     b98:	c5 2f       	mov	r28, r21
     b9a:	d2 2f       	mov	r29, r18
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	fc 01       	movw	r30, r24
     ba0:	80 89       	ldd	r24, Z+16	; 0x10
     ba2:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     bac:	81 2f       	mov	r24, r17
     bae:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     bb2:	0d 2d       	mov	r16, r13
     bb4:	1c 2f       	mov	r17, r28
     bb6:	c0 e0       	ldi	r28, 0x00	; 0
     bb8:	cd 17       	cp	r28, r29
     bba:	51 f0       	breq	.+20     	; 0xbd0 <MCP_CAN::mcp2515_readRegisterS(unsigned char, unsigned char*, unsigned char)+0x4c>
     bbc:	c8 30       	cpi	r28, 0x08	; 8
     bbe:	41 f0       	breq	.+16     	; 0xbd0 <MCP_CAN::mcp2515_readRegisterS(unsigned char, unsigned char*, unsigned char)+0x4c>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     bc6:	f8 01       	movw	r30, r16
     bc8:	81 93       	st	Z+, r24
     bca:	8f 01       	movw	r16, r30
     bcc:	cf 5f       	subi	r28, 0xFF	; 255
     bce:	f4 cf       	rjmp	.-24     	; 0xbb8 <MCP_CAN::mcp2515_readRegisterS(unsigned char, unsigned char*, unsigned char)+0x34>
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	f7 01       	movw	r30, r14
     bd4:	80 89       	ldd	r24, Z+16	; 0x10
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <digitalWrite>

00000be8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>:
_ZN7MCP_CAN19mcp2515_setRegisterEhh():
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ec 01       	movw	r28, r24
     bf2:	06 2f       	mov	r16, r22
     bf4:	14 2f       	mov	r17, r20
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	88 89       	ldd	r24, Y+16	; 0x10
     bfa:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     c04:	80 2f       	mov	r24, r16
     c06:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     c0a:	81 2f       	mov	r24, r17
     c0c:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	88 89       	ldd	r24, Y+16	; 0x10
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <digitalWrite>

00000c20 <MCP_CAN::mcp2515_setRegisterS(unsigned char, unsigned char const*, unsigned char)>:
_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh():
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	7c 01       	movw	r14, r24
     c30:	c6 2f       	mov	r28, r22
     c32:	d4 2e       	mov	r13, r20
     c34:	15 2f       	mov	r17, r21
     c36:	02 2f       	mov	r16, r18
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	fc 01       	movw	r30, r24
     c3c:	80 89       	ldd	r24, Z+16	; 0x10
     c3e:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     c48:	8c 2f       	mov	r24, r28
     c4a:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     c4e:	cd 2d       	mov	r28, r13
     c50:	d1 2f       	mov	r29, r17
     c52:	0c 0f       	add	r16, r28
     c54:	1d 2f       	mov	r17, r29
     c56:	11 1d       	adc	r17, r1
     c58:	c0 17       	cp	r28, r16
     c5a:	d1 07       	cpc	r29, r17
     c5c:	21 f0       	breq	.+8      	; 0xc66 <MCP_CAN::mcp2515_setRegisterS(unsigned char, unsigned char const*, unsigned char)+0x46>
     c5e:	89 91       	ld	r24, Y+
     c60:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     c64:	f9 cf       	rjmp	.-14     	; 0xc58 <MCP_CAN::mcp2515_setRegisterS(unsigned char, unsigned char const*, unsigned char)+0x38>
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	f7 01       	movw	r30, r14
     c6a:	80 89       	ldd	r24, Z+16	; 0x10
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <digitalWrite>

00000c7e <MCP_CAN::mcp2515_modifyRegister(unsigned char, unsigned char, unsigned char)>:
_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh():
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	ec 01       	movw	r28, r24
     c8a:	f6 2e       	mov	r15, r22
     c8c:	04 2f       	mov	r16, r20
     c8e:	12 2f       	mov	r17, r18
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	88 89       	ldd	r24, Y+16	; 0x10
     c94:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
     c98:	85 e0       	ldi	r24, 0x05	; 5
     c9a:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     c9e:	8f 2d       	mov	r24, r15
     ca0:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     ca4:	80 2f       	mov	r24, r16
     ca6:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     caa:	81 2f       	mov	r24, r17
     cac:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	88 89       	ldd	r24, Y+16	; 0x10
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <digitalWrite>

00000cc2 <MCP_CAN::mcp2515_readStatus()>:
_ZN7MCP_CAN18mcp2515_readStatusEv():
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	ec 01       	movw	r28, r24
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	88 89       	ldd	r24, Y+16	; 0x10
     cce:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
     cd2:	80 ea       	ldi	r24, 0xA0	; 160
     cd4:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	0e 94 8a 05 	call	0xb14	; 0xb14 <SPIClass::transfer(unsigned char)>
     cde:	18 2f       	mov	r17, r24
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	88 89       	ldd	r24, Y+16	; 0x10
     ce4:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
     ce8:	81 2f       	mov	r24, r17
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	08 95       	ret

00000cf2 <MCP_CAN::mcp2515_setCANCTRL_Mode(unsigned char)>:
_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh():
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	8c 01       	movw	r16, r24
     cfa:	c6 2f       	mov	r28, r22
     cfc:	26 2f       	mov	r18, r22
     cfe:	40 ee       	ldi	r20, 0xE0	; 224
     d00:	6f e0       	ldi	r22, 0x0F	; 15
     d02:	0e 94 3f 06 	call	0xc7e	; 0xc7e <MCP_CAN::mcp2515_modifyRegister(unsigned char, unsigned char, unsigned char)>
     d06:	6f e0       	ldi	r22, 0x0F	; 15
     d08:	c8 01       	movw	r24, r16
     d0a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <MCP_CAN::mcp2515_readRegister(unsigned char)>
     d0e:	98 2f       	mov	r25, r24
     d10:	90 7e       	andi	r25, 0xE0	; 224
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	9c 13       	cpse	r25, r28
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <MCP_CAN::mcp2515_setCANCTRL_Mode(unsigned char)+0x28>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)>:
_ZN7MCP_CAN18mcp2515_configRateEhh():
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	41 30       	cpi	r20, 0x01	; 1
     d2c:	29 f0       	breq	.+10     	; 0xd38 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x16>
     d2e:	42 30       	cpi	r20, 0x02	; 2
     d30:	09 f4       	brne	.+2      	; 0xd34 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x12>
     d32:	5f c0       	rjmp	.+190    	; 0xdf2 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xd0>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	32 c0       	rjmp	.+100    	; 0xd9c <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x7a>
     d38:	61 50       	subi	r22, 0x01	; 1
     d3a:	60 31       	cpi	r22, 0x10	; 16
     d3c:	d8 f7       	brcc	.-10     	; 0xd34 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x12>
     d3e:	e6 2f       	mov	r30, r22
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	eb 55       	subi	r30, 0x5B	; 91
     d44:	f9 4f       	sbci	r31, 0xF9	; 249
     d46:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__tablejump2__>
     d4a:	3e 07       	cpc	r19, r30
     d4c:	46 07       	cpc	r20, r22
     d4e:	b5 06       	cpc	r11, r21
     d50:	b9 06       	cpc	r11, r25
     d52:	bc 06       	cpc	r11, r28
     d54:	d3 06       	cpc	r13, r19
     d56:	d7 06       	cpc	r13, r23
     d58:	da 06       	cpc	r13, r26
     d5a:	de 06       	cpc	r13, r30
     d5c:	e1 06       	cpc	r14, r17
     d5e:	e4 06       	cpc	r14, r20
     d60:	e7 06       	cpc	r14, r23
     d62:	ea 06       	cpc	r14, r26
     d64:	ee 06       	cpc	r14, r30
     d66:	f2 06       	cpc	r15, r18
     d68:	f6 06       	cpc	r15, r22
     d6a:	c7 e8       	ldi	r28, 0x87	; 135
     d6c:	df ef       	ldi	r29, 0xFF	; 255
     d6e:	4f e0       	ldi	r20, 0x0F	; 15
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x5c>
     d72:	c5 e8       	ldi	r28, 0x85	; 133
     d74:	d1 ef       	ldi	r29, 0xF1	; 241
     d76:	fb cf       	rjmp	.-10     	; 0xd6e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x4c>
     d78:	c7 e0       	ldi	r28, 0x07	; 7
     d7a:	de eb       	ldi	r29, 0xBE	; 190
     d7c:	49 e0       	ldi	r20, 0x09	; 9
     d7e:	8c 01       	movw	r16, r24
     d80:	6a e2       	ldi	r22, 0x2A	; 42
     d82:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>
     d86:	4d 2f       	mov	r20, r29
     d88:	69 e2       	ldi	r22, 0x29	; 41
     d8a:	c8 01       	movw	r24, r16
     d8c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>
     d90:	4c 2f       	mov	r20, r28
     d92:	68 e2       	ldi	r22, 0x28	; 40
     d94:	c8 01       	movw	r24, r16
     d96:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	08 95       	ret
     da6:	c7 e8       	ldi	r28, 0x87	; 135
     da8:	df ef       	ldi	r29, 0xFF	; 255
     daa:	47 e0       	ldi	r20, 0x07	; 7
     dac:	e8 cf       	rjmp	.-48     	; 0xd7e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x5c>
     dae:	c7 e8       	ldi	r28, 0x87	; 135
     db0:	da ef       	ldi	r29, 0xFA	; 250
     db2:	fb cf       	rjmp	.-10     	; 0xdaa <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x88>
     db4:	c7 e8       	ldi	r28, 0x87	; 135
     db6:	df ef       	ldi	r29, 0xFF	; 255
     db8:	43 e0       	ldi	r20, 0x03	; 3
     dba:	e1 cf       	rjmp	.-62     	; 0xd7e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x5c>
     dbc:	c7 e0       	ldi	r28, 0x07	; 7
     dbe:	de eb       	ldi	r29, 0xBE	; 190
     dc0:	fb cf       	rjmp	.-10     	; 0xdb8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x96>
     dc2:	c7 e0       	ldi	r28, 0x07	; 7
     dc4:	dd ea       	ldi	r29, 0xAD	; 173
     dc6:	f8 cf       	rjmp	.-16     	; 0xdb8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x96>
     dc8:	c7 e8       	ldi	r28, 0x87	; 135
     dca:	da ef       	ldi	r29, 0xFA	; 250
     dcc:	f5 cf       	rjmp	.-22     	; 0xdb8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x96>
     dce:	c6 e8       	ldi	r28, 0x86	; 134
     dd0:	d0 ef       	ldi	r29, 0xF0	; 240
     dd2:	f2 cf       	rjmp	.-28     	; 0xdb8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x96>
     dd4:	c7 e8       	ldi	r28, 0x87	; 135
     dd6:	da ef       	ldi	r29, 0xFA	; 250
     dd8:	41 e0       	ldi	r20, 0x01	; 1
     dda:	d1 cf       	rjmp	.-94     	; 0xd7e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x5c>
     ddc:	c5 e8       	ldi	r28, 0x85	; 133
     dde:	d1 ef       	ldi	r29, 0xF1	; 241
     de0:	41 e4       	ldi	r20, 0x41	; 65
     de2:	cd cf       	rjmp	.-102    	; 0xd7e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x5c>
     de4:	c6 e8       	ldi	r28, 0x86	; 134
     de6:	d0 ef       	ldi	r29, 0xF0	; 240
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	c9 cf       	rjmp	.-110    	; 0xd7e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x5c>
     dec:	c2 e8       	ldi	r28, 0x82	; 130
     dee:	d0 ed       	ldi	r29, 0xD0	; 208
     df0:	fb cf       	rjmp	.-10     	; 0xde8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xc6>
     df2:	61 50       	subi	r22, 0x01	; 1
     df4:	60 31       	cpi	r22, 0x10	; 16
     df6:	08 f0       	brcs	.+2      	; 0xdfa <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xd8>
     df8:	9d cf       	rjmp	.-198    	; 0xd34 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x12>
     dfa:	e6 2f       	mov	r30, r22
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	ed 5f       	subi	r30, 0xFD	; 253
     e00:	f8 4f       	sbci	r31, 0xF8	; 248
     e02:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__tablejump2__>
     e06:	42 07       	cpc	r20, r18
     e08:	49 07       	cpc	r20, r25
     e0a:	13 07       	cpc	r17, r19
     e0c:	16 07       	cpc	r17, r22
     e0e:	19 07       	cpc	r17, r25
     e10:	1d 07       	cpc	r17, r29
     e12:	20 07       	cpc	r18, r16
     e14:	23 07       	cpc	r18, r19
     e16:	26 07       	cpc	r18, r22
     e18:	29 07       	cpc	r18, r25
     e1a:	2c 07       	cpc	r18, r28
     e1c:	2f 07       	cpc	r18, r31
     e1e:	32 07       	cpc	r19, r18
     e20:	35 07       	cpc	r19, r21
     e22:	38 07       	cpc	r19, r24
     e24:	3b 07       	cpc	r19, r27
     e26:	c7 e0       	ldi	r28, 0x07	; 7
     e28:	df eb       	ldi	r29, 0xBF	; 191
     e2a:	bf cf       	rjmp	.-130    	; 0xdaa <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x88>
     e2c:	c4 e0       	ldi	r28, 0x04	; 4
     e2e:	d4 ea       	ldi	r29, 0xA4	; 164
     e30:	bc cf       	rjmp	.-136    	; 0xdaa <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x88>
     e32:	c7 e0       	ldi	r28, 0x07	; 7
     e34:	de eb       	ldi	r29, 0xBE	; 190
     e36:	44 e0       	ldi	r20, 0x04	; 4
     e38:	a2 cf       	rjmp	.-188    	; 0xd7e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x5c>
     e3a:	c7 e0       	ldi	r28, 0x07	; 7
     e3c:	df eb       	ldi	r29, 0xBF	; 191
     e3e:	bc cf       	rjmp	.-136    	; 0xdb8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x96>
     e40:	c6 e0       	ldi	r28, 0x06	; 6
     e42:	d4 eb       	ldi	r29, 0xB4	; 180
     e44:	b9 cf       	rjmp	.-142    	; 0xdb8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x96>
     e46:	c7 e0       	ldi	r28, 0x07	; 7
     e48:	df eb       	ldi	r29, 0xBF	; 191
     e4a:	c6 cf       	rjmp	.-116    	; 0xdd8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xb6>
     e4c:	c7 e0       	ldi	r28, 0x07	; 7
     e4e:	de eb       	ldi	r29, 0xBE	; 190
     e50:	c3 cf       	rjmp	.-122    	; 0xdd8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xb6>
     e52:	c7 e0       	ldi	r28, 0x07	; 7
     e54:	dd ea       	ldi	r29, 0xAD	; 173
     e56:	c0 cf       	rjmp	.-128    	; 0xdd8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xb6>
     e58:	c6 e0       	ldi	r28, 0x06	; 6
     e5a:	d4 eb       	ldi	r29, 0xB4	; 180
     e5c:	bd cf       	rjmp	.-134    	; 0xdd8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xb6>
     e5e:	c5 e0       	ldi	r28, 0x05	; 5
     e60:	d1 eb       	ldi	r29, 0xB1	; 177
     e62:	ba cf       	rjmp	.-140    	; 0xdd8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xb6>
     e64:	c6 e0       	ldi	r28, 0x06	; 6
     e66:	d4 eb       	ldi	r29, 0xB4	; 180
     e68:	bf cf       	rjmp	.-130    	; 0xde8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xc6>
     e6a:	c5 e0       	ldi	r28, 0x05	; 5
     e6c:	d1 eb       	ldi	r29, 0xB1	; 177
     e6e:	bc cf       	rjmp	.-136    	; 0xde8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xc6>
     e70:	c2 e0       	ldi	r28, 0x02	; 2
     e72:	d0 e9       	ldi	r29, 0x90	; 144
     e74:	b9 cf       	rjmp	.-142    	; 0xde8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xc6>
     e76:	c0 e0       	ldi	r28, 0x00	; 0
     e78:	d0 e8       	ldi	r29, 0x80	; 128
     e7a:	b6 cf       	rjmp	.-148    	; 0xde8 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0xc6>
     e7c:	c7 e8       	ldi	r28, 0x87	; 135
     e7e:	df ef       	ldi	r29, 0xFF	; 255
     e80:	4f e3       	ldi	r20, 0x3F	; 63
     e82:	7d cf       	rjmp	.-262    	; 0xd7e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x5c>
     e84:	c7 e0       	ldi	r28, 0x07	; 7
     e86:	df eb       	ldi	r29, 0xBF	; 191
     e88:	4f e1       	ldi	r20, 0x1F	; 31
     e8a:	79 cf       	rjmp	.-270    	; 0xd7e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x5c>
     e8c:	c7 e8       	ldi	r28, 0x87	; 135
     e8e:	df ef       	ldi	r29, 0xFF	; 255
     e90:	fb cf       	rjmp	.-10     	; 0xe88 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x166>
     e92:	c7 e0       	ldi	r28, 0x07	; 7
     e94:	df eb       	ldi	r29, 0xBF	; 191
     e96:	6b cf       	rjmp	.-298    	; 0xd6e <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)+0x4c>

00000e98 <MCP_CAN::mcp2515_initCANBuffers()>:
_ZN7MCP_CAN22mcp2515_initCANBuffersEv():
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	8c 01       	movw	r16, r24
     ea0:	c0 e3       	ldi	r28, 0x30	; 48
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	6c 2f       	mov	r22, r28
     ea6:	c8 01       	movw	r24, r16
     ea8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>
     eac:	60 e1       	ldi	r22, 0x10	; 16
     eae:	6c 0f       	add	r22, r28
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	c8 01       	movw	r24, r16
     eb4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>
     eb8:	60 e2       	ldi	r22, 0x20	; 32
     eba:	6c 0f       	add	r22, r28
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	c8 01       	movw	r24, r16
     ec0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>
     ec4:	cf 5f       	subi	r28, 0xFF	; 255
     ec6:	ce 33       	cpi	r28, 0x3E	; 62
     ec8:	61 f7       	brne	.-40     	; 0xea2 <MCP_CAN::mcp2515_initCANBuffers()+0xa>
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	60 e6       	ldi	r22, 0x60	; 96
     ece:	c8 01       	movw	r24, r16
     ed0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	60 e7       	ldi	r22, 0x70	; 112
     ed8:	c8 01       	movw	r24, r16
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>

00000ee4 <MCP_CAN::mcp2515_init(unsigned char, unsigned char)>:
_ZN7MCP_CAN12mcp2515_initEhh():
     ee4:	ff 92       	push	r15
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	ec 01       	movw	r28, r24
     ef0:	06 2f       	mov	r16, r22
     ef2:	f4 2e       	mov	r15, r20
     ef4:	0e 94 90 05 	call	0xb20	; 0xb20 <MCP_CAN::mcp2515_reset()>
     ef8:	60 e8       	ldi	r22, 0x80	; 128
     efa:	ce 01       	movw	r24, r28
     efc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <MCP_CAN::mcp2515_setCANCTRL_Mode(unsigned char)>
     f00:	18 2f       	mov	r17, r24
     f02:	6a e0       	ldi	r22, 0x0A	; 10
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	11 23       	and	r17, r17
     f0c:	49 f0       	breq	.+18     	; 0xf20 <MCP_CAN::mcp2515_init(unsigned char, unsigned char)+0x3c>
     f0e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <delay>
     f12:	81 2f       	mov	r24, r17
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	08 95       	ret
     f20:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <delay>
     f24:	4f 2d       	mov	r20, r15
     f26:	60 2f       	mov	r22, r16
     f28:	ce 01       	movw	r24, r28
     f2a:	0e 94 91 06 	call	0xd22	; 0xd22 <MCP_CAN::mcp2515_configRate(unsigned char, unsigned char)>
     f2e:	88 23       	and	r24, r24
     f30:	29 f0       	breq	.+10     	; 0xf3c <MCP_CAN::mcp2515_init(unsigned char, unsigned char)+0x58>
     f32:	6a e0       	ldi	r22, 0x0A	; 10
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	e9 cf       	rjmp	.-46     	; 0xf0e <MCP_CAN::mcp2515_init(unsigned char, unsigned char)+0x2a>
     f3c:	6a e0       	ldi	r22, 0x0A	; 10
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <delay>
     f48:	ce 01       	movw	r24, r28
     f4a:	0e 94 4c 07 	call	0xe98	; 0xe98 <MCP_CAN::mcp2515_initCANBuffers()>
     f4e:	43 e0       	ldi	r20, 0x03	; 3
     f50:	6b e2       	ldi	r22, 0x2B	; 43
     f52:	ce 01       	movw	r24, r28
     f54:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>
     f58:	24 e0       	ldi	r18, 0x04	; 4
     f5a:	44 e6       	ldi	r20, 0x64	; 100
     f5c:	60 e6       	ldi	r22, 0x60	; 96
     f5e:	ce 01       	movw	r24, r28
     f60:	0e 94 3f 06 	call	0xc7e	; 0xc7e <MCP_CAN::mcp2515_modifyRegister(unsigned char, unsigned char, unsigned char)>
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	40 e6       	ldi	r20, 0x60	; 96
     f68:	60 e7       	ldi	r22, 0x70	; 112
     f6a:	ce 01       	movw	r24, r28
     f6c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <MCP_CAN::mcp2515_modifyRegister(unsigned char, unsigned char, unsigned char)>
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	ce 01       	movw	r24, r28
     f74:	0e 94 79 06 	call	0xcf2	; 0xcf2 <MCP_CAN::mcp2515_setCANCTRL_Mode(unsigned char)>
     f78:	c8 2f       	mov	r28, r24
     f7a:	88 23       	and	r24, r24
     f7c:	d1 f2       	breq	.-76     	; 0xf32 <MCP_CAN::mcp2515_init(unsigned char, unsigned char)+0x4e>
     f7e:	6a e0       	ldi	r22, 0x0A	; 10
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <delay>
     f8a:	1c 2f       	mov	r17, r28
     f8c:	c2 cf       	rjmp	.-124    	; 0xf12 <MCP_CAN::mcp2515_init(unsigned char, unsigned char)+0x2e>

00000f8e <MCP_CAN::mcp2515_write_id(unsigned char, unsigned char, unsigned long)>:
_ZN7MCP_CAN16mcp2515_write_idEhhm():
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	00 d0       	rcall	.+0      	; 0xf98 <MCP_CAN::mcp2515_write_id(unsigned char, unsigned char, unsigned long)+0xa>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <MCP_CAN::mcp2515_write_id(unsigned char, unsigned char, unsigned long)+0xc>
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	41 30       	cpi	r20, 0x01	; 1
     fa0:	21 f5       	brne	.+72     	; 0xfea <MCP_CAN::mcp2515_write_id(unsigned char, unsigned char, unsigned long)+0x5c>
     fa2:	0c 83       	std	Y+4, r16	; 0x04
     fa4:	1b 83       	std	Y+3, r17	; 0x03
     fa6:	89 01       	movw	r16, r18
     fa8:	22 27       	eor	r18, r18
     faa:	33 27       	eor	r19, r19
     fac:	40 2f       	mov	r20, r16
     fae:	44 0f       	add	r20, r20
     fb0:	44 0f       	add	r20, r20
     fb2:	44 0f       	add	r20, r20
     fb4:	40 7e       	andi	r20, 0xE0	; 224
     fb6:	50 2f       	mov	r21, r16
     fb8:	53 70       	andi	r21, 0x03	; 3
     fba:	58 60       	ori	r21, 0x08	; 8
     fbc:	45 2b       	or	r20, r21
     fbe:	4a 83       	std	Y+2, r20	; 0x02
     fc0:	55 e0       	ldi	r21, 0x05	; 5
     fc2:	16 95       	lsr	r17
     fc4:	07 95       	ror	r16
     fc6:	5a 95       	dec	r21
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <MCP_CAN::mcp2515_write_id(unsigned char, unsigned char, unsigned long)+0x34>
     fca:	09 83       	std	Y+1, r16	; 0x01
     fcc:	24 e0       	ldi	r18, 0x04	; 4
     fce:	ae 01       	movw	r20, r28
     fd0:	4f 5f       	subi	r20, 0xFF	; 255
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255
     fd4:	0e 94 10 06 	call	0xc20	; 0xc20 <MCP_CAN::mcp2515_setRegisterS(unsigned char, unsigned char const*, unsigned char)>
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	08 95       	ret
     fea:	a8 01       	movw	r20, r16
     fec:	23 e0       	ldi	r18, 0x03	; 3
     fee:	56 95       	lsr	r21
     ff0:	47 95       	ror	r20
     ff2:	2a 95       	dec	r18
     ff4:	e1 f7       	brne	.-8      	; 0xfee <MCP_CAN::mcp2515_write_id(unsigned char, unsigned char, unsigned long)+0x60>
     ff6:	49 83       	std	Y+1, r20	; 0x01
     ff8:	02 95       	swap	r16
     ffa:	00 0f       	add	r16, r16
     ffc:	00 7e       	andi	r16, 0xE0	; 224
     ffe:	0a 83       	std	Y+2, r16	; 0x02
    1000:	1c 82       	std	Y+4, r1	; 0x04
    1002:	1b 82       	std	Y+3, r1	; 0x03
    1004:	e3 cf       	rjmp	.-58     	; 0xfcc <MCP_CAN::mcp2515_write_id(unsigned char, unsigned char, unsigned long)+0x3e>

00001006 <MCP_CAN::mcp2515_read_id(unsigned char, unsigned char*, unsigned long*)>:
_ZN7MCP_CAN15mcp2515_read_idEhPhPm():
    1006:	ef 92       	push	r14
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	00 d0       	rcall	.+0      	; 0x1014 <MCP_CAN::mcp2515_read_id(unsigned char, unsigned char*, unsigned long*)+0xe>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <MCP_CAN::mcp2515_read_id(unsigned char, unsigned char*, unsigned long*)+0x10>
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	7a 01       	movw	r14, r20
    101c:	89 01       	movw	r16, r18
    101e:	fa 01       	movw	r30, r20
    1020:	10 82       	st	Z, r1
    1022:	f9 01       	movw	r30, r18
    1024:	10 82       	st	Z, r1
    1026:	11 82       	std	Z+1, r1	; 0x01
    1028:	12 82       	std	Z+2, r1	; 0x02
    102a:	13 82       	std	Z+3, r1	; 0x03
    102c:	24 e0       	ldi	r18, 0x04	; 4
    102e:	ae 01       	movw	r20, r28
    1030:	4f 5f       	subi	r20, 0xFF	; 255
    1032:	5f 4f       	sbci	r21, 0xFF	; 255
    1034:	0e 94 c2 05 	call	0xb84	; 0xb84 <MCP_CAN::mcp2515_readRegisterS(unsigned char, unsigned char*, unsigned char)>
    1038:	2a 81       	ldd	r18, Y+2	; 0x02
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	f8 e0       	ldi	r31, 0x08	; 8
    103e:	8f 9f       	mul	r24, r31
    1040:	c0 01       	movw	r24, r0
    1042:	11 24       	eor	r1, r1
    1044:	42 2f       	mov	r20, r18
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	65 e0       	ldi	r22, 0x05	; 5
    104a:	55 95       	asr	r21
    104c:	47 95       	ror	r20
    104e:	6a 95       	dec	r22
    1050:	e1 f7       	brne	.-8      	; 0x104a <MCP_CAN::mcp2515_read_id(unsigned char, unsigned char*, unsigned long*)+0x44>
    1052:	84 0f       	add	r24, r20
    1054:	95 1f       	adc	r25, r21
    1056:	09 2e       	mov	r0, r25
    1058:	00 0c       	add	r0, r0
    105a:	aa 0b       	sbc	r26, r26
    105c:	bb 0b       	sbc	r27, r27
    105e:	f8 01       	movw	r30, r16
    1060:	80 83       	st	Z, r24
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	a2 83       	std	Z+2, r26	; 0x02
    1066:	b3 83       	std	Z+3, r27	; 0x03
    1068:	23 ff       	sbrs	r18, 3
    106a:	25 c0       	rjmp	.+74     	; 0x10b6 <MCP_CAN::mcp2515_read_id(unsigned char, unsigned char*, unsigned long*)+0xb0>
    106c:	32 e0       	ldi	r19, 0x02	; 2
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	aa 1f       	adc	r26, r26
    1074:	bb 1f       	adc	r27, r27
    1076:	3a 95       	dec	r19
    1078:	d1 f7       	brne	.-12     	; 0x106e <MCP_CAN::mcp2515_read_id(unsigned char, unsigned char*, unsigned long*)+0x68>
    107a:	23 70       	andi	r18, 0x03	; 3
    107c:	82 0f       	add	r24, r18
    107e:	91 1d       	adc	r25, r1
    1080:	a1 1d       	adc	r26, r1
    1082:	b1 1d       	adc	r27, r1
    1084:	ba 2f       	mov	r27, r26
    1086:	a9 2f       	mov	r26, r25
    1088:	98 2f       	mov	r25, r24
    108a:	88 27       	eor	r24, r24
    108c:	2b 81       	ldd	r18, Y+3	; 0x03
    108e:	82 0f       	add	r24, r18
    1090:	91 1d       	adc	r25, r1
    1092:	a1 1d       	adc	r26, r1
    1094:	b1 1d       	adc	r27, r1
    1096:	ba 2f       	mov	r27, r26
    1098:	a9 2f       	mov	r26, r25
    109a:	98 2f       	mov	r25, r24
    109c:	88 27       	eor	r24, r24
    109e:	2c 81       	ldd	r18, Y+4	; 0x04
    10a0:	82 0f       	add	r24, r18
    10a2:	91 1d       	adc	r25, r1
    10a4:	a1 1d       	adc	r26, r1
    10a6:	b1 1d       	adc	r27, r1
    10a8:	80 83       	st	Z, r24
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	a2 83       	std	Z+2, r26	; 0x02
    10ae:	b3 83       	std	Z+3, r27	; 0x03
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	f7 01       	movw	r30, r14
    10b4:	80 83       	st	Z, r24
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	08 95       	ret

000010cc <MCP_CAN::mcp2515_write_canMsg(unsigned char)>:
_ZN7MCP_CAN20mcp2515_write_canMsgEh():
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ec 01       	movw	r28, r24
    10d8:	f6 2e       	mov	r15, r22
    10da:	ac 01       	movw	r20, r24
    10dc:	4a 5f       	subi	r20, 0xFA	; 250
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	65 e0       	ldi	r22, 0x05	; 5
    10e2:	6f 0d       	add	r22, r15
    10e4:	2d 81       	ldd	r18, Y+5	; 0x05
    10e6:	0e 94 10 06 	call	0xc20	; 0xc20 <MCP_CAN::mcp2515_setRegisterS(unsigned char, unsigned char const*, unsigned char)>
    10ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <MCP_CAN::mcp2515_write_canMsg(unsigned char)+0x2a>
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	80 64       	ori	r24, 0x40	; 64
    10f4:	8d 83       	std	Y+5, r24	; 0x05
    10f6:	64 e0       	ldi	r22, 0x04	; 4
    10f8:	6f 0d       	add	r22, r15
    10fa:	4d 81       	ldd	r20, Y+5	; 0x05
    10fc:	ce 01       	movw	r24, r28
    10fe:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MCP_CAN::mcp2515_setRegister(unsigned char, unsigned char)>
    1102:	09 81       	ldd	r16, Y+1	; 0x01
    1104:	1a 81       	ldd	r17, Y+2	; 0x02
    1106:	2b 81       	ldd	r18, Y+3	; 0x03
    1108:	3c 81       	ldd	r19, Y+4	; 0x04
    110a:	48 81       	ld	r20, Y
    110c:	6f 2d       	mov	r22, r15
    110e:	ce 01       	movw	r24, r28
    1110:	0e 94 c7 07 	call	0xf8e	; 0xf8e <MCP_CAN::mcp2515_write_id(unsigned char, unsigned char, unsigned long)>
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	08 95       	ret

00001120 <MCP_CAN::mcp2515_read_canMsg(unsigned char)>:
_ZN7MCP_CAN19mcp2515_read_canMsgEh():
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	ec 01       	movw	r28, r24
    112a:	16 2f       	mov	r17, r22
    112c:	9c 01       	movw	r18, r24
    112e:	2f 5f       	subi	r18, 0xFF	; 255
    1130:	3f 4f       	sbci	r19, 0xFF	; 255
    1132:	ac 01       	movw	r20, r24
    1134:	0e 94 03 08 	call	0x1006	; 0x1006 <MCP_CAN::mcp2515_read_id(unsigned char, unsigned char*, unsigned long*)>
    1138:	6f ef       	ldi	r22, 0xFF	; 255
    113a:	61 0f       	add	r22, r17
    113c:	ce 01       	movw	r24, r28
    113e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <MCP_CAN::mcp2515_readRegister(unsigned char)>
    1142:	08 2f       	mov	r16, r24
    1144:	64 e0       	ldi	r22, 0x04	; 4
    1146:	61 0f       	add	r22, r17
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <MCP_CAN::mcp2515_readRegister(unsigned char)>
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	03 ff       	sbrs	r16, 3
    1152:	11 c0       	rjmp	.+34     	; 0x1176 <MCP_CAN::mcp2515_read_canMsg(unsigned char)+0x56>
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	9e 87       	std	Y+14, r25	; 0x0e
    1158:	28 2f       	mov	r18, r24
    115a:	2f 70       	andi	r18, 0x0F	; 15
    115c:	2d 83       	std	Y+5, r18	; 0x05
    115e:	ae 01       	movw	r20, r28
    1160:	4a 5f       	subi	r20, 0xFA	; 250
    1162:	5f 4f       	sbci	r21, 0xFF	; 255
    1164:	65 e0       	ldi	r22, 0x05	; 5
    1166:	61 0f       	add	r22, r17
    1168:	ce 01       	movw	r24, r28
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <MCP_CAN::mcp2515_readRegisterS(unsigned char, unsigned char*, unsigned char)>
    1176:	1e 86       	std	Y+14, r1	; 0x0e
    1178:	ef cf       	rjmp	.-34     	; 0x1158 <MCP_CAN::mcp2515_read_canMsg(unsigned char)+0x38>

0000117a <MCP_CAN::mcp2515_start_transmit(unsigned char)>:
_ZN7MCP_CAN22mcp2515_start_transmitEh():
    117a:	61 50       	subi	r22, 0x01	; 1
    117c:	28 e0       	ldi	r18, 0x08	; 8
    117e:	48 e0       	ldi	r20, 0x08	; 8
    1180:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <MCP_CAN::mcp2515_modifyRegister(unsigned char, unsigned char, unsigned char)>

00001184 <MCP_CAN::mcp2515_getNextFreeTXBuf(unsigned char*)>:
_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh():
    1184:	8f 92       	push	r8
    1186:	9f 92       	push	r9
    1188:	af 92       	push	r10
    118a:	bf 92       	push	r11
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	00 d0       	rcall	.+0      	; 0x119c <MCP_CAN::mcp2515_getNextFreeTXBuf(unsigned char*)+0x18>
    119c:	1f 92       	push	r1
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	4c 01       	movw	r8, r24
    11a4:	6b 01       	movw	r12, r22
    11a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__malloc_margin+0x8>
    11aa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__malloc_margin+0x9>
    11ae:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__malloc_margin+0xa>
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	ab 83       	std	Y+3, r26	; 0x03
    11b8:	fb 01       	movw	r30, r22
    11ba:	10 82       	st	Z, r1
    11bc:	ce 01       	movw	r24, r28
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	7c 01       	movw	r14, r24
    11c2:	5e 01       	movw	r10, r28
    11c4:	94 e0       	ldi	r25, 0x04	; 4
    11c6:	a9 0e       	add	r10, r25
    11c8:	b1 1c       	adc	r11, r1
    11ca:	f7 01       	movw	r30, r14
    11cc:	11 91       	ld	r17, Z+
    11ce:	7f 01       	movw	r14, r30
    11d0:	61 2f       	mov	r22, r17
    11d2:	c4 01       	movw	r24, r8
    11d4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <MCP_CAN::mcp2515_readRegister(unsigned char)>
    11d8:	83 fd       	sbrc	r24, 3
    11da:	13 c0       	rjmp	.+38     	; 0x1202 <MCP_CAN::mcp2515_getNextFreeTXBuf(unsigned char*)+0x7e>
    11dc:	1f 5f       	subi	r17, 0xFF	; 255
    11de:	f6 01       	movw	r30, r12
    11e0:	10 83       	st	Z, r17
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	9f 90       	pop	r9
    11fe:	8f 90       	pop	r8
    1200:	08 95       	ret
    1202:	ea 14       	cp	r14, r10
    1204:	fb 04       	cpc	r15, r11
    1206:	09 f7       	brne	.-62     	; 0x11ca <MCP_CAN::mcp2515_getNextFreeTXBuf(unsigned char*)+0x46>
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	ec cf       	rjmp	.-40     	; 0x11e4 <MCP_CAN::mcp2515_getNextFreeTXBuf(unsigned char*)+0x60>

0000120c <MCP_CAN::MCP_CAN(unsigned char)>:
_ZN7MCP_CANC2Eh():
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	ec 01       	movw	r28, r24
    1212:	86 2f       	mov	r24, r22
    1214:	68 8b       	std	Y+16, r22	; 0x10
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <pinMode>
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	88 89       	ldd	r24, Y+16	; 0x10
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <digitalWrite>

00001228 <MCP_CAN::begin(unsigned char, unsigned char)>:
_ZN7MCP_CAN5beginEhh():
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	ec 01       	movw	r28, r24
    1232:	16 2f       	mov	r17, r22
    1234:	04 2f       	mov	r16, r20
    1236:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPIClass::begin()>
    123a:	40 2f       	mov	r20, r16
    123c:	61 2f       	mov	r22, r17
    123e:	ce 01       	movw	r24, r28
    1240:	0e 94 72 07 	call	0xee4	; 0xee4 <MCP_CAN::mcp2515_init(unsigned char, unsigned char)>
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	81 11       	cpse	r24, r1
    1248:	01 c0       	rjmp	.+2      	; 0x124c <MCP_CAN::begin(unsigned char, unsigned char)+0x24>
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	89 2f       	mov	r24, r25
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	08 95       	ret

00001258 <MCP_CAN::sendMsg()>:
_ZN7MCP_CAN7sendMsgEv():
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	1f 92       	push	r1
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	7c 01       	movw	r14, r24
    126c:	10 e0       	ldi	r17, 0x00	; 0
    126e:	00 e0       	ldi	r16, 0x00	; 0
    1270:	be 01       	movw	r22, r28
    1272:	6f 5f       	subi	r22, 0xFF	; 255
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	c7 01       	movw	r24, r14
    1278:	0e 94 c2 08 	call	0x1184	; 0x1184 <MCP_CAN::mcp2515_getNextFreeTXBuf(unsigned char*)>
    127c:	0f 5f       	subi	r16, 0xFF	; 255
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	82 30       	cpi	r24, 0x02	; 2
    1282:	29 f4       	brne	.+10     	; 0x128e <MCP_CAN::sendMsg()+0x36>
    1284:	02 33       	cpi	r16, 0x32	; 50
    1286:	11 05       	cpc	r17, r1
    1288:	99 f7       	brne	.-26     	; 0x1270 <MCP_CAN::sendMsg()+0x18>
    128a:	96 e0       	ldi	r25, 0x06	; 6
    128c:	20 c0       	rjmp	.+64     	; 0x12ce <MCP_CAN::sendMsg()+0x76>
    128e:	02 33       	cpi	r16, 0x32	; 50
    1290:	11 05       	cpc	r17, r1
    1292:	d9 f3       	breq	.-10     	; 0x128a <MCP_CAN::sendMsg()+0x32>
    1294:	69 81       	ldd	r22, Y+1	; 0x01
    1296:	c7 01       	movw	r24, r14
    1298:	0e 94 66 08 	call	0x10cc	; 0x10cc <MCP_CAN::mcp2515_write_canMsg(unsigned char)>
    129c:	69 81       	ldd	r22, Y+1	; 0x01
    129e:	c7 01       	movw	r24, r14
    12a0:	0e 94 bd 08 	call	0x117a	; 0x117a <MCP_CAN::mcp2515_start_transmit(unsigned char)>
    12a4:	10 e0       	ldi	r17, 0x00	; 0
    12a6:	00 e0       	ldi	r16, 0x00	; 0
    12a8:	0f 5f       	subi	r16, 0xFF	; 255
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	69 81       	ldd	r22, Y+1	; 0x01
    12ae:	61 50       	subi	r22, 0x01	; 1
    12b0:	c7 01       	movw	r24, r14
    12b2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <MCP_CAN::mcp2515_readRegister(unsigned char)>
    12b6:	98 2f       	mov	r25, r24
    12b8:	98 70       	andi	r25, 0x08	; 8
    12ba:	83 ff       	sbrs	r24, 3
    12bc:	05 c0       	rjmp	.+10     	; 0x12c8 <MCP_CAN::sendMsg()+0x70>
    12be:	02 33       	cpi	r16, 0x32	; 50
    12c0:	11 05       	cpc	r17, r1
    12c2:	91 f7       	brne	.-28     	; 0x12a8 <MCP_CAN::sendMsg()+0x50>
    12c4:	97 e0       	ldi	r25, 0x07	; 7
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <MCP_CAN::sendMsg()+0x76>
    12c8:	02 33       	cpi	r16, 0x32	; 50
    12ca:	11 05       	cpc	r17, r1
    12cc:	d9 f3       	breq	.-10     	; 0x12c4 <MCP_CAN::sendMsg()+0x6c>
    12ce:	89 2f       	mov	r24, r25
    12d0:	0f 90       	pop	r0
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	08 95       	ret

000012e0 <MCP_CAN::sendMsgBuf(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char*)>:
_ZN7MCP_CAN10sendMsgBufEmhhhPh():
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	0f 93       	push	r16
_ZN7MCP_CAN6setMsgEmhhhPh():
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18
    12ec:	41 83       	std	Z+1, r20	; 0x01
    12ee:	52 83       	std	Z+2, r21	; 0x02
    12f0:	63 83       	std	Z+3, r22	; 0x03
    12f2:	74 83       	std	Z+4, r23	; 0x04
    12f4:	e5 82       	std	Z+5, r14	; 0x05
    12f6:	06 87       	std	Z+14, r16	; 0x0e
    12f8:	f6 01       	movw	r30, r12
    12fa:	dc 01       	movw	r26, r24
    12fc:	16 96       	adiw	r26, 0x06	; 6
    12fe:	96 01       	movw	r18, r12
    1300:	28 5f       	subi	r18, 0xF8	; 248
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	41 91       	ld	r20, Z+
    1306:	4d 93       	st	X+, r20
    1308:	e2 17       	cp	r30, r18
    130a:	f3 07       	cpc	r31, r19
    130c:	d9 f7       	brne	.-10     	; 0x1304 <MCP_CAN::sendMsgBuf(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char*)+0x24>
_ZN7MCP_CAN10sendMsgBufEmhhhPh():
    130e:	0f 91       	pop	r16
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <MCP_CAN::sendMsg()>

0000131a <MCP_CAN::readMsg()>:
_ZN7MCP_CAN7readMsgEv():
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	ec 01       	movw	r28, r24
    1320:	0e 94 61 06 	call	0xcc2	; 0xcc2 <MCP_CAN::mcp2515_readStatus()>
    1324:	80 ff       	sbrs	r24, 0
    1326:	0e c0       	rjmp	.+28     	; 0x1344 <MCP_CAN::readMsg()+0x2a>
    1328:	61 e6       	ldi	r22, 0x61	; 97
    132a:	ce 01       	movw	r24, r28
    132c:	0e 94 90 08 	call	0x1120	; 0x1120 <MCP_CAN::mcp2515_read_canMsg(unsigned char)>
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	6c e2       	ldi	r22, 0x2C	; 44
    1336:	ce 01       	movw	r24, r28
    1338:	0e 94 3f 06 	call	0xc7e	; 0xc7e <MCP_CAN::mcp2515_modifyRegister(unsigned char, unsigned char, unsigned char)>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret
    1344:	81 ff       	sbrs	r24, 1
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <MCP_CAN::readMsg()+0x3c>
    1348:	61 e7       	ldi	r22, 0x71	; 113
    134a:	ce 01       	movw	r24, r28
    134c:	0e 94 90 08 	call	0x1120	; 0x1120 <MCP_CAN::mcp2515_read_canMsg(unsigned char)>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	42 e0       	ldi	r20, 0x02	; 2
    1354:	ef cf       	rjmp	.-34     	; 0x1334 <MCP_CAN::readMsg()+0x1a>
    1356:	84 e0       	ldi	r24, 0x04	; 4
    1358:	f2 cf       	rjmp	.-28     	; 0x133e <MCP_CAN::readMsg()+0x24>

0000135a <MCP_CAN::readMsgBufID(unsigned long*, unsigned char*, unsigned char*)>:
_ZN7MCP_CAN12readMsgBufIDEPmPhS1_():
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	ec 01       	movw	r28, r24
    136c:	6b 01       	movw	r12, r22
    136e:	8a 01       	movw	r16, r20
    1370:	79 01       	movw	r14, r18
    1372:	0e 94 8d 09 	call	0x131a	; 0x131a <MCP_CAN::readMsg()>
    1376:	81 11       	cpse	r24, r1
    1378:	1e c0       	rjmp	.+60     	; 0x13b6 <MCP_CAN::readMsgBufID(unsigned long*, unsigned char*, unsigned char*)+0x5c>
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	f8 01       	movw	r30, r16
    137e:	90 83       	st	Z, r25
    1380:	49 81       	ldd	r20, Y+1	; 0x01
    1382:	5a 81       	ldd	r21, Y+2	; 0x02
    1384:	6b 81       	ldd	r22, Y+3	; 0x03
    1386:	7c 81       	ldd	r23, Y+4	; 0x04
    1388:	f6 01       	movw	r30, r12
    138a:	40 83       	st	Z, r20
    138c:	51 83       	std	Z+1, r21	; 0x01
    138e:	62 83       	std	Z+2, r22	; 0x02
    1390:	73 83       	std	Z+3, r23	; 0x03
    1392:	de 01       	movw	r26, r28
    1394:	16 96       	adiw	r26, 0x06	; 6
    1396:	f7 01       	movw	r30, r14
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	92 17       	cp	r25, r18
    13a0:	13 06       	cpc	r1, r19
    13a2:	59 f0       	breq	.+22     	; 0x13ba <MCP_CAN::readMsgBufID(unsigned long*, unsigned char*, unsigned char*)+0x60>
    13a4:	54 f0       	brlt	.+20     	; 0x13ba <MCP_CAN::readMsgBufID(unsigned long*, unsigned char*, unsigned char*)+0x60>
    13a6:	28 30       	cpi	r18, 0x08	; 8
    13a8:	31 05       	cpc	r19, r1
    13aa:	39 f0       	breq	.+14     	; 0x13ba <MCP_CAN::readMsgBufID(unsigned long*, unsigned char*, unsigned char*)+0x60>
    13ac:	9d 91       	ld	r25, X+
    13ae:	91 93       	st	Z+, r25
    13b0:	2f 5f       	subi	r18, 0xFF	; 255
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	f3 cf       	rjmp	.-26     	; 0x139c <MCP_CAN::readMsgBufID(unsigned long*, unsigned char*, unsigned char*)+0x42>
    13b6:	f8 01       	movw	r30, r16
    13b8:	10 82       	st	Z, r1
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	08 95       	ret

000013cc <MCP_CAN::checkReceive()>:
_ZN7MCP_CAN12checkReceiveEv():
    13cc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <MCP_CAN::mcp2515_readStatus()>
    13d0:	83 70       	andi	r24, 0x03	; 3
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <MCP_CAN::checkReceive()+0xc>
    13d4:	84 e0       	ldi	r24, 0x04	; 4
    13d6:	08 95       	ret
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	08 95       	ret

000013dc <MCP_CAN::checkError(unsigned char*)>:
_ZN7MCP_CAN10checkErrorEPh():
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	eb 01       	movw	r28, r22
    13e2:	6d e2       	ldi	r22, 0x2D	; 45
    13e4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <MCP_CAN::mcp2515_readRegister(unsigned char)>
    13e8:	88 83       	st	Y, r24
    13ea:	88 7f       	andi	r24, 0xF8	; 248
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <MCP_CAN::checkError(unsigned char*)+0x14>
    13ee:	85 e0       	ldi	r24, 0x05	; 5
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <MCP_CAN::isExtendedFrame()>:
_ZN7MCP_CAN15isExtendedFrameEv():
d:\work\adam opel\arduino-canbus-monitor WORKING with VCDS/mcp_can.cpp:1072
** Descriptions:            did we just receive standard 11bit frame or extended 29bit? 0 = std, 1 = ext
*********************************************************************************************************/
INT8U MCP_CAN::isExtendedFrame(void)
{
    return m_nExtFlg;
} 
    13f6:	fc 01       	movw	r30, r24
    13f8:	80 81       	ld	r24, Z
    13fa:	08 95       	ret

000013fc <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    13fc:	cf 93       	push	r28
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:28
  uint8_t sreg = SREG;
    13fe:	cf b7       	in	r28, 0x3f	; 63
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1400:	f8 94       	cli
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
    1402:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <SPIClass::initialized>
    1406:	81 11       	cpse	r24, r1
    1408:	23 c0       	rjmp	.+70     	; 0x1450 <SPIClass::begin()+0x54>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    140a:	ea eb       	ldi	r30, 0xBA	; 186
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	84 91       	lpm	r24, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    1410:	e7 e9       	ldi	r30, 0x97	; 151
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	94 91       	lpm	r25, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    1416:	e8 2f       	mov	r30, r24
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	eb 51       	subi	r30, 0x1B	; 27
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	a5 91       	lpm	r26, Z+
    1424:	b4 91       	lpm	r27, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1426:	ec 91       	ld	r30, X
    1428:	e9 23       	and	r30, r25
    142a:	21 f4       	brne	.+8      	; 0x1434 <SPIClass::begin()+0x38>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	84 e0       	ldi	r24, 0x04	; 4
    1430:	0e 94 99 0b 	call	0x1732	; 0x1732 <digitalWrite>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	84 e0       	ldi	r24, 0x04	; 4
    1438:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <pinMode>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    143c:	6c 9a       	sbi	0x0d, 4	; 13
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
    143e:	6e 9a       	sbi	0x0d, 6	; 13
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	87 e0       	ldi	r24, 0x07	; 7
    1444:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <pinMode>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	85 e0       	ldi	r24, 0x05	; 5
    144c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <pinMode>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
    1450:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <SPIClass::initialized>
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <SPIClass::initialized>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
    145a:	cf bf       	out	0x3f, r28	; 63
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:64
}
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <__vector_17>:
__vector_17():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1460:	1f 92       	push	r1
    1462:	0f 92       	push	r0
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	0f 92       	push	r0
    1468:	11 24       	eor	r1, r1
    146a:	4f 93       	push	r20
    146c:	5f 93       	push	r21
    146e:	6f 93       	push	r22
    1470:	7f 93       	push	r23
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <timer0_millis>
    147a:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <timer0_millis+0x1>
    147e:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <timer0_millis+0x2>
    1482:	70 91 5c 01 	lds	r23, 0x015C	; 0x80015c <timer0_millis+0x3>
    1486:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <timer0_fract>
    148a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timer0_exact.2332>
    148e:	98 30       	cpi	r25, 0x08	; 8
    1490:	19 f5       	brne	.+70     	; 0x14d8 <__vector_17+0x78>
    1492:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <timer0_exact.2332>
    1496:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timer0_exact.2332>
    149a:	97 30       	cpi	r25, 0x07	; 7
    149c:	08 f1       	brcs	.+66     	; 0x14e0 <__vector_17+0x80>
    149e:	85 5e       	subi	r24, 0xE5	; 229
    14a0:	8d 37       	cpi	r24, 0x7D	; 125
    14a2:	00 f1       	brcs	.+64     	; 0x14e4 <__vector_17+0x84>
    14a4:	8d 57       	subi	r24, 0x7D	; 125
    14a6:	4d 5f       	subi	r20, 0xFD	; 253
    14a8:	5f 4f       	sbci	r21, 0xFF	; 255
    14aa:	6f 4f       	sbci	r22, 0xFF	; 255
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timer0_fract>
    14b2:	40 93 59 01 	sts	0x0159, r20	; 0x800159 <timer0_millis>
    14b6:	50 93 5a 01 	sts	0x015A, r21	; 0x80015a <timer0_millis+0x1>
    14ba:	60 93 5b 01 	sts	0x015B, r22	; 0x80015b <timer0_millis+0x2>
    14be:	70 93 5c 01 	sts	0x015C, r23	; 0x80015c <timer0_millis+0x3>
    14c2:	9f 91       	pop	r25
    14c4:	8f 91       	pop	r24
    14c6:	7f 91       	pop	r23
    14c8:	6f 91       	pop	r22
    14ca:	5f 91       	pop	r21
    14cc:	4f 91       	pop	r20
    14ce:	0f 90       	pop	r0
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	0f 90       	pop	r0
    14d4:	1f 90       	pop	r1
    14d6:	18 95       	reti
    14d8:	9f 5f       	subi	r25, 0xFF	; 255
    14da:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timer0_exact.2332>
    14de:	db cf       	rjmp	.-74     	; 0x1496 <__vector_17+0x36>
    14e0:	84 5e       	subi	r24, 0xE4	; 228
    14e2:	de cf       	rjmp	.-68     	; 0x14a0 <__vector_17+0x40>
    14e4:	4e 5f       	subi	r20, 0xFE	; 254
    14e6:	5f 4f       	sbci	r21, 0xFF	; 255
    14e8:	6f 4f       	sbci	r22, 0xFF	; 255
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	e0 cf       	rjmp	.-64     	; 0x14ae <__vector_17+0x4e>

000014ee <millis>:
millis():
    14ee:	2f b7       	in	r18, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <timer0_millis>
    14f6:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <timer0_millis+0x1>
    14fa:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <timer0_millis+0x2>
    14fe:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <timer0_millis+0x3>
    1502:	2f bf       	out	0x3f, r18	; 63
    1504:	08 95       	ret

00001506 <micros>:
micros():
    1506:	cf 92       	push	r12
    1508:	df 92       	push	r13
    150a:	ef 92       	push	r14
    150c:	ff 92       	push	r15
    150e:	6f b7       	in	r22, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <timer0_millis>
    1516:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <timer0_millis+0x1>
    151a:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <timer0_millis+0x2>
    151e:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <timer0_millis+0x3>
    1522:	50 91 58 01 	lds	r21, 0x0158	; 0x800158 <timer0_fract>
    1526:	22 b7       	in	r18, 0x32	; 50
    1528:	38 b7       	in	r19, 0x38	; 56
    152a:	43 2f       	mov	r20, r19
    152c:	42 70       	andi	r20, 0x02	; 2
    152e:	31 ff       	sbrs	r19, 1
    1530:	04 c0       	rjmp	.+8      	; 0x153a <micros+0x34>
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	2f 3f       	cpi	r18, 0xFF	; 255
    1536:	09 f4       	brne	.+2      	; 0x153a <micros+0x34>
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	6f bf       	out	0x3f, r22	; 63
    153c:	6c 01       	movw	r12, r24
    153e:	7d 01       	movw	r14, r26
    1540:	37 e0       	ldi	r19, 0x07	; 7
    1542:	cc 0c       	add	r12, r12
    1544:	dd 1c       	adc	r13, r13
    1546:	ee 1c       	adc	r14, r14
    1548:	ff 1c       	adc	r15, r15
    154a:	3a 95       	dec	r19
    154c:	d1 f7       	brne	.-12     	; 0x1542 <micros+0x3c>
    154e:	c5 0e       	add	r12, r21
    1550:	d1 1c       	adc	r13, r1
    1552:	e1 1c       	adc	r14, r1
    1554:	f1 1c       	adc	r15, r1
    1556:	c8 1a       	sub	r12, r24
    1558:	d9 0a       	sbc	r13, r25
    155a:	ea 0a       	sbc	r14, r26
    155c:	fb 0a       	sbc	r15, r27
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	aa 1f       	adc	r26, r26
    1564:	bb 1f       	adc	r27, r27
    1566:	c8 1a       	sub	r12, r24
    1568:	d9 0a       	sbc	r13, r25
    156a:	ea 0a       	sbc	r14, r26
    156c:	fb 0a       	sbc	r15, r27
    156e:	63 e0       	ldi	r22, 0x03	; 3
    1570:	cc 0c       	add	r12, r12
    1572:	dd 1c       	adc	r13, r13
    1574:	ee 1c       	adc	r14, r14
    1576:	ff 1c       	adc	r15, r15
    1578:	6a 95       	dec	r22
    157a:	d1 f7       	brne	.-12     	; 0x1570 <micros+0x6a>
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	ae ea       	ldi	r26, 0xAE	; 174
    1580:	b8 e0       	ldi	r27, 0x08	; 8
    1582:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__umulhisi3>
    1586:	67 2f       	mov	r22, r23
    1588:	78 2f       	mov	r23, r24
    158a:	89 2f       	mov	r24, r25
    158c:	99 27       	eor	r25, r25
    158e:	6c 0d       	add	r22, r12
    1590:	7d 1d       	adc	r23, r13
    1592:	8e 1d       	adc	r24, r14
    1594:	9f 1d       	adc	r25, r15
    1596:	44 23       	and	r20, r20
    1598:	21 f0       	breq	.+8      	; 0x15a2 <micros+0x9c>
    159a:	62 55       	subi	r22, 0x52	; 82
    159c:	77 4f       	sbci	r23, 0xF7	; 247
    159e:	8f 4f       	sbci	r24, 0xFF	; 255
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	cf 90       	pop	r12
    15aa:	08 95       	ret

000015ac <delay>:
delay():
    15ac:	8f 92       	push	r8
    15ae:	9f 92       	push	r9
    15b0:	af 92       	push	r10
    15b2:	bf 92       	push	r11
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	6b 01       	movw	r12, r22
    15be:	7c 01       	movw	r14, r24
    15c0:	0e 94 83 0a 	call	0x1506	; 0x1506 <micros>
    15c4:	4b 01       	movw	r8, r22
    15c6:	5c 01       	movw	r10, r24
    15c8:	c1 14       	cp	r12, r1
    15ca:	d1 04       	cpc	r13, r1
    15cc:	e1 04       	cpc	r14, r1
    15ce:	f1 04       	cpc	r15, r1
    15d0:	e9 f0       	breq	.+58     	; 0x160c <delay+0x60>
    15d2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <yield>
    15d6:	0e 94 83 0a 	call	0x1506	; 0x1506 <micros>
    15da:	68 19       	sub	r22, r8
    15dc:	79 09       	sbc	r23, r9
    15de:	8a 09       	sbc	r24, r10
    15e0:	9b 09       	sbc	r25, r11
    15e2:	68 3e       	cpi	r22, 0xE8	; 232
    15e4:	73 40       	sbci	r23, 0x03	; 3
    15e6:	81 05       	cpc	r24, r1
    15e8:	91 05       	cpc	r25, r1
    15ea:	70 f3       	brcs	.-36     	; 0x15c8 <delay+0x1c>
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	c2 1a       	sub	r12, r18
    15f0:	d1 08       	sbc	r13, r1
    15f2:	e1 08       	sbc	r14, r1
    15f4:	f1 08       	sbc	r15, r1
    15f6:	88 ee       	ldi	r24, 0xE8	; 232
    15f8:	88 0e       	add	r8, r24
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	98 1e       	adc	r9, r24
    15fe:	a1 1c       	adc	r10, r1
    1600:	b1 1c       	adc	r11, r1
    1602:	c1 14       	cp	r12, r1
    1604:	d1 04       	cpc	r13, r1
    1606:	e1 04       	cpc	r14, r1
    1608:	f1 04       	cpc	r15, r1
    160a:	29 f7       	brne	.-54     	; 0x15d6 <delay+0x2a>
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	cf 90       	pop	r12
    1614:	bf 90       	pop	r11
    1616:	af 90       	pop	r10
    1618:	9f 90       	pop	r9
    161a:	8f 90       	pop	r8
    161c:	08 95       	ret

0000161e <init>:
init():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    161e:	78 94       	sei
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
    1620:	83 b7       	in	r24, 0x33	; 51
    1622:	83 60       	ori	r24, 0x03	; 3
    1624:	83 bf       	out	0x33, r24	; 51
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:968
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
    1626:	83 b7       	in	r24, 0x33	; 51
    1628:	88 64       	ori	r24, 0x48	; 72
    162a:	83 bf       	out	0x33, r24	; 51
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    162c:	89 b7       	in	r24, 0x39	; 57
    162e:	82 60       	ori	r24, 0x02	; 2
    1630:	89 bf       	out	0x39, r24	; 57
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1632:	82 e0       	ldi	r24, 0x02	; 2
    1634:	8e bd       	out	0x2e, r24	; 46
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1636:	8f b5       	in	r24, 0x2f	; 47
    1638:	81 60       	ori	r24, 0x01	; 1
    163a:	8f bd       	out	0x2f, r24	; 47
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    163c:	87 b5       	in	r24, 0x27	; 39
    163e:	84 60       	ori	r24, 0x04	; 4
    1640:	87 bd       	out	0x27, r24	; 39
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    1642:	87 b5       	in	r24, 0x27	; 39
    1644:	80 64       	ori	r24, 0x40	; 64
    1646:	87 bd       	out	0x27, r24	; 39
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    1648:	ea e8       	ldi	r30, 0x8A	; 138
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	83 60       	ori	r24, 0x03	; 3
    1650:	80 83       	st	Z, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    1652:	eb e8       	ldi	r30, 0x8B	; 139
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	81 60       	ori	r24, 0x01	; 1
    165a:	80 83       	st	Z, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    165c:	1a b8       	out	0x0a, r1	; 10
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    165e:	08 95       	ret

00001660 <turnOffPWM>:
turnOffPWM():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    1660:	81 50       	subi	r24, 0x01	; 1
    1662:	8b 30       	cpi	r24, 0x0B	; 11
    1664:	48 f5       	brcc	.+82     	; 0x16b8 <turnOffPWM+0x58>
    1666:	e8 2f       	mov	r30, r24
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	e7 5c       	subi	r30, 0xC7	; 199
    166c:	f4 4f       	sbci	r31, 0xF4	; 244
    166e:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__tablejump2__>
    1672:	59 0b       	sbc	r21, r25
    1674:	59 0b       	sbc	r21, r25
    1676:	5c 0b       	sbc	r21, r28
    1678:	44 0b       	sbc	r20, r20
    167a:	48 0b       	sbc	r20, r24
    167c:	5c 0b       	sbc	r21, r28
    167e:	4b 0b       	sbc	r20, r27
    1680:	5c 0b       	sbc	r21, r28
    1682:	5c 0b       	sbc	r21, r28
    1684:	4f 0b       	sbc	r20, r31
    1686:	55 0b       	sbc	r21, r21
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1688:	8f b5       	in	r24, 0x2f	; 47
    168a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    168c:	8f bd       	out	0x2f, r24	; 47
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    168e:	08 95       	ret
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1690:	8f b5       	in	r24, 0x2f	; 47
    1692:	8f 7d       	andi	r24, 0xDF	; 223
    1694:	fb cf       	rjmp	.-10     	; 0x168c <turnOffPWM+0x2c>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
    1696:	87 b5       	in	r24, 0x27	; 39
    1698:	8f 7d       	andi	r24, 0xDF	; 223
    169a:	87 bd       	out	0x27, r24	; 39
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:100
        break;
    169c:	08 95       	ret
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    169e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    16a2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    16a4:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    16a8:	08 95       	ret
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    16aa:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    16ae:	8f 7d       	andi	r24, 0xDF	; 223
    16b0:	f9 cf       	rjmp	.-14     	; 0x16a4 <turnOffPWM+0x44>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
    16b2:	83 b7       	in	r24, 0x33	; 51
    16b4:	8f 7d       	andi	r24, 0xDF	; 223
    16b6:	83 bf       	out	0x33, r24	; 51
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
    16b8:	08 95       	ret

000016ba <pinMode>:
pinMode():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	fc 01       	movw	r30, r24
    16c2:	ed 56       	subi	r30, 0x6D	; 109
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	24 91       	lpm	r18, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    16c8:	8a 54       	subi	r24, 0x4A	; 74
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	fc 01       	movw	r30, r24
    16ce:	84 91       	lpm	r24, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    16d0:	88 23       	and	r24, r24
    16d2:	c9 f0       	breq	.+50     	; 0x1706 <pinMode+0x4c>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	fc 01       	movw	r30, r24
    16dc:	eb 51       	subi	r30, 0x1B	; 27
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	a5 91       	lpm	r26, Z+
    16e2:	b4 91       	lpm	r27, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    16e4:	fc 01       	movw	r30, r24
    16e6:	e7 52       	subi	r30, 0x27	; 39
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	c5 91       	lpm	r28, Z+
    16ec:	d4 91       	lpm	r29, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    16ee:	61 11       	cpse	r22, r1
    16f0:	0d c0       	rjmp	.+26     	; 0x170c <pinMode+0x52>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    16f2:	9f b7       	in	r25, 0x3f	; 63
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    16f4:	f8 94       	cli
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    16f6:	8c 91       	ld	r24, X
    16f8:	20 95       	com	r18
    16fa:	82 23       	and	r24, r18
    16fc:	8c 93       	st	X, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    16fe:	88 81       	ld	r24, Y
    1700:	28 23       	and	r18, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1702:	28 83       	st	Y, r18
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1704:	9f bf       	out	0x3f, r25	; 63
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    170c:	62 30       	cpi	r22, 0x02	; 2
    170e:	51 f4       	brne	.+20     	; 0x1724 <pinMode+0x6a>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1710:	9f b7       	in	r25, 0x3f	; 63
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1712:	f8 94       	cli
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1714:	3c 91       	ld	r19, X
    1716:	82 2f       	mov	r24, r18
    1718:	80 95       	com	r24
    171a:	83 23       	and	r24, r19
    171c:	8c 93       	st	X, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    171e:	e8 81       	ld	r30, Y
    1720:	2e 2b       	or	r18, r30
    1722:	ef cf       	rjmp	.-34     	; 0x1702 <pinMode+0x48>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1724:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    1726:	f8 94       	cli
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1728:	ec 91       	ld	r30, X
    172a:	2e 2b       	or	r18, r30
    172c:	2c 93       	st	X, r18
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    172e:	8f bf       	out	0x3f, r24	; 63
    1730:	ea cf       	rjmp	.-44     	; 0x1706 <pinMode+0x4c>

00001732 <digitalWrite>:
digitalWrite():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	f9 01       	movw	r30, r18
    173e:	e0 59       	subi	r30, 0x90	; 144
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	84 91       	lpm	r24, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1744:	f9 01       	movw	r30, r18
    1746:	ed 56       	subi	r30, 0x6D	; 109
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	d4 91       	lpm	r29, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    174c:	f9 01       	movw	r30, r18
    174e:	ea 54       	subi	r30, 0x4A	; 74
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	c4 91       	lpm	r28, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1754:	cc 23       	and	r28, r28
    1756:	a9 f0       	breq	.+42     	; 0x1782 <digitalWrite+0x50>
    1758:	16 2f       	mov	r17, r22
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    175a:	81 11       	cpse	r24, r1
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    175c:	0e 94 30 0b 	call	0x1660	; 0x1660 <turnOffPWM>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1760:	ec 2f       	mov	r30, r28
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	e7 52       	subi	r30, 0x27	; 39
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	a5 91       	lpm	r26, Z+
    176e:	b4 91       	lpm	r27, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1770:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    1772:	f8 94       	cli
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    1774:	ec 91       	ld	r30, X
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1776:	11 11       	cpse	r17, r1
    1778:	08 c0       	rjmp	.+16     	; 0x178a <digitalWrite+0x58>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    177a:	d0 95       	com	r29
    177c:	de 23       	and	r29, r30
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    177e:	dc 93       	st	X, r29
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1780:	8f bf       	out	0x3f, r24	; 63
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	08 95       	ret
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    178a:	de 2b       	or	r29, r30
    178c:	f8 cf       	rjmp	.-16     	; 0x177e <digitalWrite+0x4c>

0000178e <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    178e:	fc 01       	movw	r30, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1790:	91 8d       	ldd	r25, Z+25	; 0x19
    1792:	22 8d       	ldd	r18, Z+26	; 0x1a
    1794:	89 2f       	mov	r24, r25
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	80 5c       	subi	r24, 0xC0	; 192
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	82 1b       	sub	r24, r18
    179e:	91 09       	sbc	r25, r1
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    17a0:	8f 73       	andi	r24, 0x3F	; 63
    17a2:	99 27       	eor	r25, r25
    17a4:	08 95       	ret

000017a6 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    17a6:	fc 01       	movw	r30, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    17a8:	91 8d       	ldd	r25, Z+25	; 0x19
    17aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    17ac:	98 17       	cp	r25, r24
    17ae:	31 f0       	breq	.+12     	; 0x17bc <HardwareSerial::peek()+0x16>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    17b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    17b2:	e8 0f       	add	r30, r24
    17b4:	f1 1d       	adc	r31, r1
    17b6:	85 8d       	ldd	r24, Z+29	; 0x1d
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	08 95       	ret
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    17bc:	8f ef       	ldi	r24, 0xFF	; 255
    17be:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    17c0:	08 95       	ret

000017c2 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    17c2:	fc 01       	movw	r30, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    17c4:	91 8d       	ldd	r25, Z+25	; 0x19
    17c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    17c8:	98 17       	cp	r25, r24
    17ca:	61 f0       	breq	.+24     	; 0x17e4 <HardwareSerial::read()+0x22>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    17cc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    17ce:	ae 0f       	add	r26, r30
    17d0:	bf 2f       	mov	r27, r31
    17d2:	b1 1d       	adc	r27, r1
    17d4:	5d 96       	adiw	r26, 0x1d	; 29
    17d6:	8c 91       	ld	r24, X
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    17d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    17da:	9f 5f       	subi	r25, 0xFF	; 255
    17dc:	9f 73       	andi	r25, 0x3F	; 63
    17de:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	08 95       	ret
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    17e4:	8f ef       	ldi	r24, 0xFF	; 255
    17e6:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    17e8:	08 95       	ret

000017ea <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    17ea:	fc 01       	movw	r30, r24
    17ec:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    17ee:	44 8d       	ldd	r20, Z+28	; 0x1c
    17f0:	25 2f       	mov	r18, r21
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	84 2f       	mov	r24, r20
    17f6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    17f8:	82 1b       	sub	r24, r18
    17fa:	93 0b       	sbc	r25, r19
    17fc:	54 17       	cp	r21, r20
    17fe:	10 f0       	brcs	.+4      	; 0x1804 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    1800:	cf 96       	adiw	r24, 0x3f	; 63
    1802:	08 95       	ret
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    1804:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    1806:	08 95       	ret

00001808 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1808:	82 e5       	ldi	r24, 0x52	; 82
    180a:	9d e0       	ldi	r25, 0x0D	; 13
    180c:	89 2b       	or	r24, r25
    180e:	49 f0       	breq	.+18     	; 0x1822 <serialEventRun()+0x1a>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    1810:	8b eb       	ldi	r24, 0xBB	; 187
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	89 2b       	or	r24, r25
    1816:	29 f0       	breq	.+10     	; 0x1822 <serialEventRun()+0x1a>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    1818:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <Serial0_available()>
    181c:	81 11       	cpse	r24, r1
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    181e:	0e 94 bb 00 	call	0x176	; 0x176 <serialEvent()>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	89 2b       	or	r24, r25
    1828:	49 f0       	breq	.+18     	; 0x183c <serialEventRun()+0x34>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	89 2b       	or	r24, r25
    1830:	29 f0       	breq	.+10     	; 0x183c <serialEventRun()+0x34>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    1832:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1836:	81 11       	cpse	r24, r1
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    1838:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    183c:	08 95       	ret

0000183e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    183e:	fc 01       	movw	r30, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1840:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1842:	a8 0f       	add	r26, r24
    1844:	b9 2f       	mov	r27, r25
    1846:	b1 1d       	adc	r27, r1
    1848:	a3 5a       	subi	r26, 0xA3	; 163
    184a:	bf 4f       	sbci	r27, 0xFF	; 255
    184c:	2c 91       	ld	r18, X
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    184e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	8f 73       	andi	r24, 0x3F	; 63
    1856:	99 27       	eor	r25, r25
    1858:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    185a:	a6 89       	ldd	r26, Z+22	; 0x16
    185c:	b7 89       	ldd	r27, Z+23	; 0x17
    185e:	2c 93       	st	X, r18
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    1860:	a0 89       	ldd	r26, Z+16	; 0x10
    1862:	b1 89       	ldd	r27, Z+17	; 0x11
    1864:	8c 91       	ld	r24, X
    1866:	80 64       	ori	r24, 0x40	; 64
    1868:	8c 93       	st	X, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    186a:	93 8d       	ldd	r25, Z+27	; 0x1b
    186c:	84 8d       	ldd	r24, Z+28	; 0x1c
    186e:	98 13       	cpse	r25, r24
    1870:	06 c0       	rjmp	.+12     	; 0x187e <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1872:	02 88       	ldd	r0, Z+18	; 0x12
    1874:	f3 89       	ldd	r31, Z+19	; 0x13
    1876:	e0 2d       	mov	r30, r0
    1878:	80 81       	ld	r24, Z
    187a:	8f 7d       	andi	r24, 0xDF	; 223
    187c:	80 83       	st	Z, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    187e:	08 95       	ret

00001880 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	ec 01       	movw	r28, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1886:	88 8d       	ldd	r24, Y+24	; 0x18
    1888:	88 23       	and	r24, r24
    188a:	b9 f0       	breq	.+46     	; 0x18ba <HardwareSerial::flush()+0x3a>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    188c:	aa 89       	ldd	r26, Y+18	; 0x12
    188e:	bb 89       	ldd	r27, Y+19	; 0x13
    1890:	e8 89       	ldd	r30, Y+16	; 0x10
    1892:	f9 89       	ldd	r31, Y+17	; 0x11
    1894:	8c 91       	ld	r24, X
    1896:	85 fd       	sbrc	r24, 5
    1898:	03 c0       	rjmp	.+6      	; 0x18a0 <HardwareSerial::flush()+0x20>
    189a:	80 81       	ld	r24, Z
    189c:	86 fd       	sbrc	r24, 6
    189e:	0d c0       	rjmp	.+26     	; 0x18ba <HardwareSerial::flush()+0x3a>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	07 fc       	sbrc	r0, 7
    18a4:	f7 cf       	rjmp	.-18     	; 0x1894 <HardwareSerial::flush()+0x14>
    18a6:	8c 91       	ld	r24, X
    18a8:	85 ff       	sbrs	r24, 5
    18aa:	f2 cf       	rjmp	.-28     	; 0x1890 <HardwareSerial::flush()+0x10>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    18ac:	80 81       	ld	r24, Z
    18ae:	85 ff       	sbrs	r24, 5
    18b0:	ed cf       	rjmp	.-38     	; 0x188c <HardwareSerial::flush()+0xc>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    18b2:	ce 01       	movw	r24, r28
    18b4:	0e 94 1f 0c 	call	0x183e	; 0x183e <HardwareSerial::_tx_udr_empty_irq()>
    18b8:	e9 cf       	rjmp	.-46     	; 0x188c <HardwareSerial::flush()+0xc>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    18c0:	ef 92       	push	r14
    18c2:	ff 92       	push	r15
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	ec 01       	movw	r28, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    18d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18d6:	98 13       	cpse	r25, r24
    18d8:	16 c0       	rjmp	.+44     	; 0x1906 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    18da:	e8 89       	ldd	r30, Y+16	; 0x10
    18dc:	f9 89       	ldd	r31, Y+17	; 0x11
    18de:	80 81       	ld	r24, Z
    18e0:	85 ff       	sbrs	r24, 5
    18e2:	11 c0       	rjmp	.+34     	; 0x1906 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    18e4:	ee 89       	ldd	r30, Y+22	; 0x16
    18e6:	ff 89       	ldd	r31, Y+23	; 0x17
    18e8:	60 83       	st	Z, r22
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    18ea:	e8 89       	ldd	r30, Y+16	; 0x10
    18ec:	f9 89       	ldd	r31, Y+17	; 0x11
    18ee:	80 81       	ld	r24, Z
    18f0:	80 64       	ori	r24, 0x40	; 64
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    18f2:	80 83       	st	Z, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	08 95       	ret
    1906:	f6 2e       	mov	r15, r22
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1908:	0b 8d       	ldd	r16, Y+27	; 0x1b
    190a:	10 e0       	ldi	r17, 0x00	; 0
    190c:	0f 5f       	subi	r16, 0xFF	; 255
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	0f 73       	andi	r16, 0x3F	; 63
    1912:	11 27       	eor	r17, r17
    1914:	e0 2e       	mov	r14, r16
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1916:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1918:	8e 11       	cpse	r24, r14
    191a:	0c c0       	rjmp	.+24     	; 0x1934 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	07 fc       	sbrc	r0, 7
    1920:	fa cf       	rjmp	.-12     	; 0x1916 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1922:	e8 89       	ldd	r30, Y+16	; 0x10
    1924:	f9 89       	ldd	r31, Y+17	; 0x11
    1926:	80 81       	ld	r24, Z
    1928:	85 ff       	sbrs	r24, 5
    192a:	f5 cf       	rjmp	.-22     	; 0x1916 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    192c:	ce 01       	movw	r24, r28
    192e:	0e 94 1f 0c 	call	0x183e	; 0x183e <HardwareSerial::_tx_udr_empty_irq()>
    1932:	f1 cf       	rjmp	.-30     	; 0x1916 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1934:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1936:	ec 0f       	add	r30, r28
    1938:	fd 2f       	mov	r31, r29
    193a:	f1 1d       	adc	r31, r1
    193c:	e3 5a       	subi	r30, 0xA3	; 163
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	f0 82       	st	Z, r15
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    1942:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    1944:	ea 89       	ldd	r30, Y+18	; 0x12
    1946:	fb 89       	ldd	r31, Y+19	; 0x13
    1948:	80 81       	ld	r24, Z
    194a:	80 62       	ori	r24, 0x20	; 32
    194c:	d2 cf       	rjmp	.-92     	; 0x18f2 <HardwareSerial::write(unsigned char)+0x32>

0000194e <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    194e:	cf 92       	push	r12
    1950:	df 92       	push	r13
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	ec 01       	movw	r28, r24
    195e:	6a 01       	movw	r12, r20
    1960:	7b 01       	movw	r14, r22
    1962:	12 2f       	mov	r17, r18
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	70 e2       	ldi	r23, 0x20	; 32
    1968:	8c e1       	ldi	r24, 0x1C	; 28
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a7 01       	movw	r20, r14
    196e:	96 01       	movw	r18, r12
    1970:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__udivmodsi4>
    1974:	21 50       	subi	r18, 0x01	; 1
    1976:	31 09       	sbc	r19, r1
    1978:	41 09       	sbc	r20, r1
    197a:	51 09       	sbc	r21, r1
    197c:	56 95       	lsr	r21
    197e:	47 95       	ror	r20
    1980:	37 95       	ror	r19
    1982:	27 95       	ror	r18
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  *_ucsra = 1 << U2X0;
    1984:	e8 89       	ldd	r30, Y+16	; 0x10
    1986:	f9 89       	ldd	r31, Y+17	; 0x11
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	80 83       	st	Z, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    198c:	21 15       	cp	r18, r1
    198e:	80 e1       	ldi	r24, 0x10	; 16
    1990:	38 07       	cpc	r19, r24
    1992:	98 f0       	brcs	.+38     	; 0x19ba <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    1994:	e8 89       	ldd	r30, Y+16	; 0x10
    1996:	f9 89       	ldd	r31, Y+17	; 0x11
    1998:	10 82       	st	Z, r1
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	70 e1       	ldi	r23, 0x10	; 16
    199e:	8e e0       	ldi	r24, 0x0E	; 14
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a7 01       	movw	r20, r14
    19a4:	96 01       	movw	r18, r12
    19a6:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__udivmodsi4>
    19aa:	21 50       	subi	r18, 0x01	; 1
    19ac:	31 09       	sbc	r19, r1
    19ae:	41 09       	sbc	r20, r1
    19b0:	51 09       	sbc	r21, r1
    19b2:	56 95       	lsr	r21
    19b4:	47 95       	ror	r20
    19b6:	37 95       	ror	r19
    19b8:	27 95       	ror	r18
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    19ba:	ec 85       	ldd	r30, Y+12	; 0x0c
    19bc:	fd 85       	ldd	r31, Y+13	; 0x0d
    19be:	30 83       	st	Z, r19
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    19c0:	ee 85       	ldd	r30, Y+14	; 0x0e
    19c2:	ff 85       	ldd	r31, Y+15	; 0x0f
    19c4:	20 83       	st	Z, r18
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    19c6:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:130

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
    19c8:	10 68       	ori	r17, 0x80	; 128
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#endif
  *_ucsrc = config;
    19ca:	ec 89       	ldd	r30, Y+20	; 0x14
    19cc:	fd 89       	ldd	r31, Y+21	; 0x15
    19ce:	10 83       	st	Z, r17
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    19d0:	ea 89       	ldd	r30, Y+18	; 0x12
    19d2:	fb 89       	ldd	r31, Y+19	; 0x13
    19d4:	80 81       	ld	r24, Z
    19d6:	88 69       	ori	r24, 0x98	; 152
    19d8:	80 83       	st	Z, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    19da:	ea 89       	ldd	r30, Y+18	; 0x12
    19dc:	fb 89       	ldd	r31, Y+19	; 0x13
    19de:	80 81       	ld	r24, Z
    19e0:	8f 7d       	andi	r24, 0xDF	; 223
    19e2:	80 83       	st	Z, r24
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	ff 90       	pop	r15
    19ec:	ef 90       	pop	r14
    19ee:	df 90       	pop	r13
    19f0:	cf 90       	pop	r12
    19f2:	08 95       	ret

000019f4 <__vector_19>:
__vector_19():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    19f4:	1f 92       	push	r1
    19f6:	0f 92       	push	r0
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	0f 92       	push	r0
    19fc:	11 24       	eor	r1, r1
    19fe:	2f 93       	push	r18
    1a00:	8f 93       	push	r24
    1a02:	9f 93       	push	r25
    1a04:	ef 93       	push	r30
    1a06:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1a08:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <Serial+0x10>
    1a0c:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <Serial+0x11>
    1a10:	80 81       	ld	r24, Z
    1a12:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <Serial+0x16>
    1a16:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <Serial+0x17>
    1a1a:	82 fd       	sbrc	r24, 2
    1a1c:	1b c0       	rjmp	.+54     	; 0x1a54 <__vector_19+0x60>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1a1e:	90 81       	ld	r25, Z
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1a20:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <Serial+0x19>
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1a28:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <Serial+0x1a>
    1a2c:	82 17       	cp	r24, r18
    1a2e:	41 f0       	breq	.+16     	; 0x1a40 <__vector_19+0x4c>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    1a30:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <Serial+0x19>
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	e3 5a       	subi	r30, 0xA3	; 163
    1a38:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3a:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    1a3c:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <Serial+0x19>
__vector_19():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	2f 91       	pop	r18
    1a4a:	0f 90       	pop	r0
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	0f 90       	pop	r0
    1a50:	1f 90       	pop	r1
    1a52:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1a54:	80 81       	ld	r24, Z
__vector_19():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    1a56:	f4 cf       	rjmp	.-24     	; 0x1a40 <__vector_19+0x4c>

00001a58 <__vector_21>:
__vector_21():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1a58:	1f 92       	push	r1
    1a5a:	0f 92       	push	r0
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	0f 92       	push	r0
    1a60:	11 24       	eor	r1, r1
    1a62:	2f 93       	push	r18
    1a64:	3f 93       	push	r19
    1a66:	4f 93       	push	r20
    1a68:	5f 93       	push	r21
    1a6a:	6f 93       	push	r22
    1a6c:	7f 93       	push	r23
    1a6e:	8f 93       	push	r24
    1a70:	9f 93       	push	r25
    1a72:	af 93       	push	r26
    1a74:	bf 93       	push	r27
    1a76:	ef 93       	push	r30
    1a78:	ff 93       	push	r31
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1a7a:	8d e5       	ldi	r24, 0x5D	; 93
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	0e 94 1f 0c 	call	0x183e	; 0x183e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1a82:	ff 91       	pop	r31
    1a84:	ef 91       	pop	r30
    1a86:	bf 91       	pop	r27
    1a88:	af 91       	pop	r26
    1a8a:	9f 91       	pop	r25
    1a8c:	8f 91       	pop	r24
    1a8e:	7f 91       	pop	r23
    1a90:	6f 91       	pop	r22
    1a92:	5f 91       	pop	r21
    1a94:	4f 91       	pop	r20
    1a96:	3f 91       	pop	r19
    1a98:	2f 91       	pop	r18
    1a9a:	0f 90       	pop	r0
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	0f 90       	pop	r0
    1aa0:	1f 90       	pop	r1
    1aa2:	18 95       	reti

00001aa4 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1aa4:	8d e5       	ldi	r24, 0x5D	; 93
    1aa6:	91 e0       	ldi	r25, 0x01	; 1
    1aa8:	0e 94 c7 0b 	call	0x178e	; 0x178e <HardwareSerial::available()>
    1aac:	21 e0       	ldi	r18, 0x01	; 1
    1aae:	89 2b       	or	r24, r25
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <Serial0_available()+0x10>
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1ab4:	82 2f       	mov	r24, r18
    1ab6:	08 95       	ret

00001ab8 <_GLOBAL__sub_I___vector_19>:
_ZN5PrintC4Ev():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ab8:	ed e5       	ldi	r30, 0x5D	; 93
    1aba:	f1 e0       	ldi	r31, 0x01	; 1
    1abc:	13 82       	std	Z+3, r1	; 0x03
    1abe:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1ac0:	88 ee       	ldi	r24, 0xE8	; 232
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	a0 e0       	ldi	r26, 0x00	; 0
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	84 83       	std	Z+4, r24	; 0x04
    1aca:	95 83       	std	Z+5, r25	; 0x05
    1acc:	a6 83       	std	Z+6, r26	; 0x06
    1ace:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1ad0:	85 e4       	ldi	r24, 0x45	; 69
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	80 83       	st	Z, r24
    1ad8:	80 e4       	ldi	r24, 0x40	; 64
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	95 87       	std	Z+13, r25	; 0x0d
    1ade:	84 87       	std	Z+12, r24	; 0x0c
    1ae0:	29 e2       	ldi	r18, 0x29	; 41
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	37 87       	std	Z+15, r19	; 0x0f
    1ae6:	26 87       	std	Z+14, r18	; 0x0e
    1ae8:	2b e2       	ldi	r18, 0x2B	; 43
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	31 8b       	std	Z+17, r19	; 0x11
    1aee:	20 8b       	std	Z+16, r18	; 0x10
    1af0:	2a e2       	ldi	r18, 0x2A	; 42
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	33 8b       	std	Z+19, r19	; 0x13
    1af6:	22 8b       	std	Z+18, r18	; 0x12
    1af8:	95 8b       	std	Z+21, r25	; 0x15
    1afa:	84 8b       	std	Z+20, r24	; 0x14
    1afc:	8c e2       	ldi	r24, 0x2C	; 44
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	97 8b       	std	Z+23, r25	; 0x17
    1b02:	86 8b       	std	Z+22, r24	; 0x16
    1b04:	11 8e       	std	Z+25, r1	; 0x19
    1b06:	12 8e       	std	Z+26, r1	; 0x1a
    1b08:	13 8e       	std	Z+27, r1	; 0x1b
    1b0a:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_19():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    1b0c:	08 95       	ret

00001b0e <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1b0e:	af 92       	push	r10
    1b10:	bf 92       	push	r11
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	6c 01       	movw	r12, r24
    1b24:	7b 01       	movw	r14, r22
    1b26:	8b 01       	movw	r16, r22
    1b28:	04 0f       	add	r16, r20
    1b2a:	15 1f       	adc	r17, r21
    1b2c:	eb 01       	movw	r28, r22
    1b2e:	5e 01       	movw	r10, r28
    1b30:	ae 18       	sub	r10, r14
    1b32:	bf 08       	sbc	r11, r15
    1b34:	c0 17       	cp	r28, r16
    1b36:	d1 07       	cpc	r29, r17
    1b38:	59 f0       	breq	.+22     	; 0x1b50 <Print::write(unsigned char const*, unsigned int)+0x42>
    1b3a:	69 91       	ld	r22, Y+
    1b3c:	d6 01       	movw	r26, r12
    1b3e:	ed 91       	ld	r30, X+
    1b40:	fc 91       	ld	r31, X
    1b42:	01 90       	ld	r0, Z+
    1b44:	f0 81       	ld	r31, Z
    1b46:	e0 2d       	mov	r30, r0
    1b48:	c6 01       	movw	r24, r12
    1b4a:	09 95       	icall
    1b4c:	89 2b       	or	r24, r25
    1b4e:	79 f7       	brne	.-34     	; 0x1b2e <Print::write(unsigned char const*, unsigned int)+0x20>
    1b50:	c5 01       	movw	r24, r10
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	ff 90       	pop	r15
    1b5c:	ef 90       	pop	r14
    1b5e:	df 90       	pop	r13
    1b60:	cf 90       	pop	r12
    1b62:	bf 90       	pop	r11
    1b64:	af 90       	pop	r10
    1b66:	08 95       	ret

00001b68 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    1b68:	fb 01       	movw	r30, r22
    1b6a:	01 90       	ld	r0, Z+
    1b6c:	00 20       	and	r0, r0
    1b6e:	e9 f7       	brne	.-6      	; 0x1b6a <Print::write(char const*) [clone .part.2]+0x2>
    1b70:	31 97       	sbiw	r30, 0x01	; 1
    1b72:	af 01       	movw	r20, r30
    1b74:	46 1b       	sub	r20, r22
    1b76:	57 0b       	sbc	r21, r23
    1b78:	dc 01       	movw	r26, r24
    1b7a:	ed 91       	ld	r30, X+
    1b7c:	fc 91       	ld	r31, X
    1b7e:	02 80       	ldd	r0, Z+2	; 0x02
    1b80:	f3 81       	ldd	r31, Z+3	; 0x03
    1b82:	e0 2d       	mov	r30, r0
    1b84:	09 94       	ijmp

00001b86 <Print::print(char const*)>:
    1b86:	61 15       	cp	r22, r1
    1b88:	71 05       	cpc	r23, r1
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <Print::print(char const*)+0xa>
    1b8c:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	08 95       	ret

00001b96 <Print::print(char)>:
_ZN5Print5printEc():
    1b96:	dc 01       	movw	r26, r24
    1b98:	ed 91       	ld	r30, X+
    1b9a:	fc 91       	ld	r31, X
    1b9c:	01 90       	ld	r0, Z+
    1b9e:	f0 81       	ld	r31, Z
    1ba0:	e0 2d       	mov	r30, r0
    1ba2:	09 94       	ijmp

00001ba4 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    1ba4:	8f 92       	push	r8
    1ba6:	9f 92       	push	r9
    1ba8:	af 92       	push	r10
    1baa:	bf 92       	push	r11
    1bac:	ef 92       	push	r14
    1bae:	ff 92       	push	r15
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	a1 97       	sbiw	r28, 0x21	; 33
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	7c 01       	movw	r14, r24
    1bca:	fa 01       	movw	r30, r20
    1bcc:	cb 01       	movw	r24, r22
    1bce:	19 a2       	std	Y+33, r1	; 0x21
    1bd0:	22 30       	cpi	r18, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <Print::printNumber(unsigned long, unsigned char)+0x32>
    1bd4:	2a e0       	ldi	r18, 0x0A	; 10
    1bd6:	8e 01       	movw	r16, r28
    1bd8:	0f 5d       	subi	r16, 0xDF	; 223
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	82 2e       	mov	r8, r18
    1bde:	91 2c       	mov	r9, r1
    1be0:	b1 2c       	mov	r11, r1
    1be2:	a1 2c       	mov	r10, r1
    1be4:	bf 01       	movw	r22, r30
    1be6:	a5 01       	movw	r20, r10
    1be8:	94 01       	movw	r18, r8
    1bea:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__udivmodsi4>
    1bee:	f9 01       	movw	r30, r18
    1bf0:	ca 01       	movw	r24, r20
    1bf2:	6a 30       	cpi	r22, 0x0A	; 10
    1bf4:	0c f5       	brge	.+66     	; 0x1c38 <Print::printNumber(unsigned long, unsigned char)+0x94>
    1bf6:	60 5d       	subi	r22, 0xD0	; 208
    1bf8:	d8 01       	movw	r26, r16
    1bfa:	6e 93       	st	-X, r22
    1bfc:	8d 01       	movw	r16, r26
    1bfe:	23 2b       	or	r18, r19
    1c00:	24 2b       	or	r18, r20
    1c02:	25 2b       	or	r18, r21
    1c04:	79 f7       	brne	.-34     	; 0x1be4 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	10 97       	sbiw	r26, 0x00	; 0
    1c0c:	21 f0       	breq	.+8      	; 0x1c16 <Print::printNumber(unsigned long, unsigned char)+0x72>
    1c0e:	bd 01       	movw	r22, r26
    1c10:	c7 01       	movw	r24, r14
    1c12:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    1c16:	a1 96       	adiw	r28, 0x21	; 33
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	9f 90       	pop	r9
    1c34:	8f 90       	pop	r8
    1c36:	08 95       	ret
    1c38:	69 5c       	subi	r22, 0xC9	; 201
    1c3a:	de cf       	rjmp	.-68     	; 0x1bf8 <Print::printNumber(unsigned long, unsigned char)+0x54>

00001c3c <Print::print(long, int)>:
_ZN5Print5printEli():
    1c3c:	cf 92       	push	r12
    1c3e:	df 92       	push	r13
    1c40:	ef 92       	push	r14
    1c42:	ff 92       	push	r15
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	21 15       	cp	r18, r1
    1c4e:	31 05       	cpc	r19, r1
    1c50:	81 f4       	brne	.+32     	; 0x1c72 <Print::print(long, int)+0x36>
    1c52:	dc 01       	movw	r26, r24
    1c54:	ed 91       	ld	r30, X+
    1c56:	fc 91       	ld	r31, X
    1c58:	01 90       	ld	r0, Z+
    1c5a:	f0 81       	ld	r31, Z
    1c5c:	e0 2d       	mov	r30, r0
    1c5e:	64 2f       	mov	r22, r20
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	1f 91       	pop	r17
    1c66:	0f 91       	pop	r16
    1c68:	ff 90       	pop	r15
    1c6a:	ef 90       	pop	r14
    1c6c:	df 90       	pop	r13
    1c6e:	cf 90       	pop	r12
    1c70:	09 94       	ijmp
    1c72:	2a 30       	cpi	r18, 0x0A	; 10
    1c74:	31 05       	cpc	r19, r1
    1c76:	01 f5       	brne	.+64     	; 0x1cb8 <Print::print(long, int)+0x7c>
    1c78:	2a e0       	ldi	r18, 0x0A	; 10
    1c7a:	77 ff       	sbrs	r23, 7
    1c7c:	1d c0       	rjmp	.+58     	; 0x1cb8 <Print::print(long, int)+0x7c>
    1c7e:	6a 01       	movw	r12, r20
    1c80:	7b 01       	movw	r14, r22
    1c82:	ec 01       	movw	r28, r24
    1c84:	6d e2       	ldi	r22, 0x2D	; 45
    1c86:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <Print::print(char)>
    1c8a:	8c 01       	movw	r16, r24
    1c8c:	44 27       	eor	r20, r20
    1c8e:	55 27       	eor	r21, r21
    1c90:	ba 01       	movw	r22, r20
    1c92:	4c 19       	sub	r20, r12
    1c94:	5d 09       	sbc	r21, r13
    1c96:	6e 09       	sbc	r22, r14
    1c98:	7f 09       	sbc	r23, r15
    1c9a:	2a e0       	ldi	r18, 0x0A	; 10
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Print::printNumber(unsigned long, unsigned char)>
    1ca2:	80 0f       	add	r24, r16
    1ca4:	91 1f       	adc	r25, r17
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	08 95       	ret
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	ff 90       	pop	r15
    1cc2:	ef 90       	pop	r14
    1cc4:	df 90       	pop	r13
    1cc6:	cf 90       	pop	r12
    1cc8:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <Print::printNumber(unsigned long, unsigned char)>

00001ccc <Print::print(int, int)>:
_ZN5Print5printEii():
    1ccc:	9a 01       	movw	r18, r20
    1cce:	ab 01       	movw	r20, r22
    1cd0:	77 0f       	add	r23, r23
    1cd2:	66 0b       	sbc	r22, r22
    1cd4:	77 0b       	sbc	r23, r23
    1cd6:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <Print::print(long, int)>

00001cda <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1cda:	21 15       	cp	r18, r1
    1cdc:	31 05       	cpc	r19, r1
    1cde:	41 f4       	brne	.+16     	; 0x1cf0 <Print::print(unsigned long, int)+0x16>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	ed 91       	ld	r30, X+
    1ce4:	fc 91       	ld	r31, X
    1ce6:	01 90       	ld	r0, Z+
    1ce8:	f0 81       	ld	r31, Z
    1cea:	e0 2d       	mov	r30, r0
    1cec:	64 2f       	mov	r22, r20
    1cee:	09 94       	ijmp
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
    1cf0:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <Print::printNumber(unsigned long, unsigned char)>

00001cf4 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1cf4:	9a 01       	movw	r18, r20
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
    1cf6:	46 2f       	mov	r20, r22
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <Print::print(unsigned long, int)>

00001d02 <String::invalidate()>:
_ZN6String10invalidateEv():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:278

unsigned char String::concat(const char *cstr)
{
  if (!cstr) return 0;
  return concat(cstr, strlen(cstr));
}
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	ec 01       	movw	r28, r24
    1d08:	88 81       	ld	r24, Y
    1d0a:	99 81       	ldd	r25, Y+1	; 0x01
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	11 f0       	breq	.+4      	; 0x1d14 <String::invalidate()+0x12>
    1d10:	0e 94 3e 10 	call	0x207c	; 0x207c <free>
    1d14:	19 82       	std	Y+1, r1	; 0x01
    1d16:	18 82       	st	Y, r1
    1d18:	1d 82       	std	Y+5, r1	; 0x05
    1d1a:	1c 82       	std	Y+4, r1	; 0x04
    1d1c:	1b 82       	std	Y+3, r1	; 0x03
    1d1e:	1a 82       	std	Y+2, r1	; 0x02
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	ec 01       	movw	r28, r24
    1d30:	8b 01       	movw	r16, r22
    1d32:	6f 5f       	subi	r22, 0xFF	; 255
    1d34:	7f 4f       	sbci	r23, 0xFF	; 255
    1d36:	88 81       	ld	r24, Y
    1d38:	99 81       	ldd	r25, Y+1	; 0x01
    1d3a:	0e 94 c7 10 	call	0x218e	; 0x218e <realloc>
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	51 f0       	breq	.+20     	; 0x1d56 <String::changeBuffer(unsigned int)+0x30>
    1d42:	99 83       	std	Y+1, r25	; 0x01
    1d44:	88 83       	st	Y, r24
    1d46:	1b 83       	std	Y+3, r17	; 0x03
    1d48:	0a 83       	std	Y+2, r16	; 0x02
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	f9 cf       	rjmp	.-14     	; 0x1d4c <String::changeBuffer(unsigned int)+0x26>

00001d5a <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	ec 01       	movw	r28, r24
    1d60:	88 81       	ld	r24, Y
    1d62:	99 81       	ldd	r25, Y+1	; 0x01
    1d64:	89 2b       	or	r24, r25
    1d66:	49 f0       	breq	.+18     	; 0x1d7a <String::reserve(unsigned int)+0x20>
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6c:	86 17       	cp	r24, r22
    1d6e:	97 07       	cpc	r25, r23
    1d70:	20 f0       	brcs	.+8      	; 0x1d7a <String::reserve(unsigned int)+0x20>
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	08 95       	ret
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <String::changeBuffer(unsigned int)>
    1d80:	88 23       	and	r24, r24
    1d82:	c1 f3       	breq	.-16     	; 0x1d74 <String::reserve(unsigned int)+0x1a>
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	89 2b       	or	r24, r25
    1d8a:	99 f7       	brne	.-26     	; 0x1d72 <String::reserve(unsigned int)+0x18>
    1d8c:	e8 81       	ld	r30, Y
    1d8e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d90:	10 82       	st	Z, r1
    1d92:	ef cf       	rjmp	.-34     	; 0x1d72 <String::reserve(unsigned int)+0x18>

00001d94 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
    1da2:	7b 01       	movw	r14, r22
    1da4:	8a 01       	movw	r16, r20
    1da6:	ba 01       	movw	r22, r20
    1da8:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <String::reserve(unsigned int)>
    1dac:	81 11       	cpse	r24, r1
    1dae:	0b c0       	rjmp	.+22     	; 0x1dc6 <String::copy(char const*, unsigned int)+0x32>
    1db0:	ce 01       	movw	r24, r28
    1db2:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <String::invalidate()>
    1db6:	ce 01       	movw	r24, r28
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	ef 90       	pop	r14
    1dc4:	08 95       	ret
    1dc6:	1d 83       	std	Y+5, r17	; 0x05
    1dc8:	0c 83       	std	Y+4, r16	; 0x04
    1dca:	b7 01       	movw	r22, r14
    1dcc:	88 81       	ld	r24, Y
    1dce:	99 81       	ldd	r25, Y+1	; 0x01
    1dd0:	0e 94 8d 11 	call	0x231a	; 0x231a <strcpy>
    1dd4:	f0 cf       	rjmp	.-32     	; 0x1db6 <String::copy(char const*, unsigned int)+0x22>

00001dd6 <String::String(char const*)>:
_ZN6String4initEv():
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	11 82       	std	Z+1, r1	; 0x01
    1dda:	10 82       	st	Z, r1
    1ddc:	13 82       	std	Z+3, r1	; 0x03
    1dde:	12 82       	std	Z+2, r1	; 0x02
    1de0:	15 82       	std	Z+5, r1	; 0x05
    1de2:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    1de4:	61 15       	cp	r22, r1
    1de6:	71 05       	cpc	r23, r1
    1de8:	51 f0       	breq	.+20     	; 0x1dfe <String::String(char const*)+0x28>
    1dea:	fb 01       	movw	r30, r22
    1dec:	01 90       	ld	r0, Z+
    1dee:	00 20       	and	r0, r0
    1df0:	e9 f7       	brne	.-6      	; 0x1dec <String::String(char const*)+0x16>
    1df2:	31 97       	sbiw	r30, 0x01	; 1
    1df4:	af 01       	movw	r20, r30
    1df6:	46 1b       	sub	r20, r22
    1df8:	57 0b       	sbc	r21, r23
    1dfa:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <String::copy(char const*, unsigned int)>
    1dfe:	08 95       	ret

00001e00 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    1e00:	fb 01       	movw	r30, r22
    1e02:	01 90       	ld	r0, Z+
    1e04:	00 20       	and	r0, r0
    1e06:	e9 f7       	brne	.-6      	; 0x1e02 <String::operator=(char const*) [clone .part.3]+0x2>
    1e08:	31 97       	sbiw	r30, 0x01	; 1
    1e0a:	af 01       	movw	r20, r30
    1e0c:	46 1b       	sub	r20, r22
    1e0e:	57 0b       	sbc	r21, r23
    1e10:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <String::copy(char const*, unsigned int)>

00001e14 <String::operator=(char const*)>:
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	ec 01       	movw	r28, r24
    1e1a:	61 15       	cp	r22, r1
    1e1c:	71 05       	cpc	r23, r1
    1e1e:	31 f0       	breq	.+12     	; 0x1e2c <String::operator=(char const*)+0x18>
    1e20:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <String::operator=(char const*) [clone .part.3]>
    1e24:	ce 01       	movw	r24, r28
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	08 95       	ret
    1e2c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <String::invalidate()>
    1e30:	f9 cf       	rjmp	.-14     	; 0x1e24 <String::operator=(char const*)+0x10>

00001e32 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	61 15       	cp	r22, r1
    1e40:	71 05       	cpc	r23, r1
    1e42:	41 f4       	brne	.+16     	; 0x1e54 <String::concat(char const*, unsigned int)+0x22>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	08 95       	ret
    1e54:	41 15       	cp	r20, r1
    1e56:	51 05       	cpc	r21, r1
    1e58:	b1 f0       	breq	.+44     	; 0x1e86 <String::concat(char const*, unsigned int)+0x54>
    1e5a:	7b 01       	movw	r14, r22
    1e5c:	ec 01       	movw	r28, r24
    1e5e:	0c 81       	ldd	r16, Y+4	; 0x04
    1e60:	1d 81       	ldd	r17, Y+5	; 0x05
    1e62:	04 0f       	add	r16, r20
    1e64:	15 1f       	adc	r17, r21
    1e66:	b8 01       	movw	r22, r16
    1e68:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <String::reserve(unsigned int)>
    1e6c:	88 23       	and	r24, r24
    1e6e:	51 f3       	breq	.-44     	; 0x1e44 <String::concat(char const*, unsigned int)+0x12>
    1e70:	28 81       	ld	r18, Y
    1e72:	39 81       	ldd	r19, Y+1	; 0x01
    1e74:	8c 81       	ldd	r24, Y+4	; 0x04
    1e76:	9d 81       	ldd	r25, Y+5	; 0x05
    1e78:	b7 01       	movw	r22, r14
    1e7a:	82 0f       	add	r24, r18
    1e7c:	93 1f       	adc	r25, r19
    1e7e:	0e 94 8d 11 	call	0x231a	; 0x231a <strcpy>
    1e82:	1d 83       	std	Y+5, r17	; 0x05
    1e84:	0c 83       	std	Y+4, r16	; 0x04
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	de cf       	rjmp	.-68     	; 0x1e46 <String::concat(char const*, unsigned int)+0x14>

00001e8a <String::concat(char)>:
_ZN6String6concatEc():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:281

unsigned char String::concat(char c)
{
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <String::concat(char)+0x6>
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:283
  char buf[2];
  buf[0] = c;
    1e94:	69 83       	std	Y+1, r22	; 0x01
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:284
  buf[1] = 0;
    1e96:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:285
  return concat(buf, 1);
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	be 01       	movw	r22, r28
    1e9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <String::concat(char const*, unsigned int)>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:286
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	08 95       	ret

00001eb0 <initVariant>:
initVariant():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1eb0:	08 95       	ret

00001eb2 <main>:
main():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1eb2:	0e 94 0f 0b 	call	0x161e	; 0x161e <init>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    1eb6:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <initVariant>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1eba:	0e 94 a4 00 	call	0x148	; 0x148 <setup>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1ebe:	c4 e0       	ldi	r28, 0x04	; 4
    1ec0:	dc e0       	ldi	r29, 0x0C	; 12
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1ec2:	0e 94 b9 00 	call	0x172	; 0x172 <loop>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1ec6:	20 97       	sbiw	r28, 0x00	; 0
    1ec8:	e1 f3       	breq	.-8      	; 0x1ec2 <main+0x10>
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1eca:	0e 94 04 0c 	call	0x1808	; 0x1808 <serialEventRun()>
    1ece:	f9 cf       	rjmp	.-14     	; 0x1ec2 <main+0x10>

00001ed0 <operator new(unsigned int)>:
_Znwj():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    1ed0:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <malloc>

00001ed4 <yield>:
__empty():
C:\Users\dsl40\AppData\Local\Arduino15\packages\MajorCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    1ed4:	08 95       	ret

00001ed6 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1ed6:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1ed8:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1eda:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1edc:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1ede:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1ee0:	0d c0       	rjmp	.+26     	; 0x1efc <__udivmodsi4_ep>

00001ee2 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1ee2:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1ee4:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1ee6:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1ee8:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1eea:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1eec:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1eee:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1ef0:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1ef2:	20 f0       	brcs	.+8      	; 0x1efc <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1ef4:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1ef6:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1ef8:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1efa:	f5 0b       	sbc	r31, r21

00001efc <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1efc:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1efe:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1f00:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1f02:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1f04:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1f08:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1f0a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1f0c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1f0e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1f10:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1f12:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1f14:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1f16:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1f18:	08 95       	ret

00001f1a <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1f1a:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1f1c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1f1e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1f20:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1f22:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1f24:	09 94       	ijmp

00001f26 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1f26:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1f28:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1f2a:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1f2c:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1f2e:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1f30:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1f32:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1f34:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1f36:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1f38:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1f3a:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1f3c:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1f3e:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1f40:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1f42:	08 95       	ret

00001f44 <malloc>:
malloc():
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	82 30       	cpi	r24, 0x02	; 2
    1f4e:	91 05       	cpc	r25, r1
    1f50:	10 f4       	brcc	.+4      	; 0x1f56 <malloc+0x12>
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <__flp>
    1f5a:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <__flp+0x1>
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	a0 e0       	ldi	r26, 0x00	; 0
    1f66:	30 97       	sbiw	r30, 0x00	; 0
    1f68:	99 f4       	brne	.+38     	; 0x1f90 <malloc+0x4c>
    1f6a:	21 15       	cp	r18, r1
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <malloc+0x2e>
    1f70:	4a c0       	rjmp	.+148    	; 0x2006 <malloc+0xc2>
    1f72:	28 1b       	sub	r18, r24
    1f74:	39 0b       	sbc	r19, r25
    1f76:	24 30       	cpi	r18, 0x04	; 4
    1f78:	31 05       	cpc	r19, r1
    1f7a:	d8 f5       	brcc	.+118    	; 0x1ff2 <malloc+0xae>
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f80:	61 15       	cp	r22, r1
    1f82:	71 05       	cpc	r23, r1
    1f84:	89 f1       	breq	.+98     	; 0x1fe8 <malloc+0xa4>
    1f86:	fb 01       	movw	r30, r22
    1f88:	93 83       	std	Z+3, r25	; 0x03
    1f8a:	82 83       	std	Z+2, r24	; 0x02
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	11 c0       	rjmp	.+34     	; 0x1fb2 <malloc+0x6e>
    1f90:	40 81       	ld	r20, Z
    1f92:	51 81       	ldd	r21, Z+1	; 0x01
    1f94:	02 81       	ldd	r16, Z+2	; 0x02
    1f96:	13 81       	ldd	r17, Z+3	; 0x03
    1f98:	48 17       	cp	r20, r24
    1f9a:	59 07       	cpc	r21, r25
    1f9c:	e0 f0       	brcs	.+56     	; 0x1fd6 <malloc+0x92>
    1f9e:	48 17       	cp	r20, r24
    1fa0:	59 07       	cpc	r21, r25
    1fa2:	99 f4       	brne	.+38     	; 0x1fca <malloc+0x86>
    1fa4:	10 97       	sbiw	r26, 0x00	; 0
    1fa6:	61 f0       	breq	.+24     	; 0x1fc0 <malloc+0x7c>
    1fa8:	12 96       	adiw	r26, 0x02	; 2
    1faa:	0c 93       	st	X, r16
    1fac:	12 97       	sbiw	r26, 0x02	; 2
    1fae:	13 96       	adiw	r26, 0x03	; 3
    1fb0:	1c 93       	st	X, r17
    1fb2:	32 96       	adiw	r30, 0x02	; 2
    1fb4:	cf 01       	movw	r24, r30
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	08 95       	ret
    1fc0:	00 93 fc 01 	sts	0x01FC, r16	; 0x8001fc <__flp>
    1fc4:	10 93 fd 01 	sts	0x01FD, r17	; 0x8001fd <__flp+0x1>
    1fc8:	f4 cf       	rjmp	.-24     	; 0x1fb2 <malloc+0x6e>
    1fca:	21 15       	cp	r18, r1
    1fcc:	31 05       	cpc	r19, r1
    1fce:	51 f0       	breq	.+20     	; 0x1fe4 <malloc+0xa0>
    1fd0:	42 17       	cp	r20, r18
    1fd2:	53 07       	cpc	r21, r19
    1fd4:	38 f0       	brcs	.+14     	; 0x1fe4 <malloc+0xa0>
    1fd6:	a9 01       	movw	r20, r18
    1fd8:	db 01       	movw	r26, r22
    1fda:	9a 01       	movw	r18, r20
    1fdc:	bd 01       	movw	r22, r26
    1fde:	df 01       	movw	r26, r30
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	c1 cf       	rjmp	.-126    	; 0x1f66 <malloc+0x22>
    1fe4:	ef 01       	movw	r28, r30
    1fe6:	f9 cf       	rjmp	.-14     	; 0x1fda <malloc+0x96>
    1fe8:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <__flp+0x1>
    1fec:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <__flp>
    1ff0:	cd cf       	rjmp	.-102    	; 0x1f8c <malloc+0x48>
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e2 0f       	add	r30, r18
    1ff6:	f3 1f       	adc	r31, r19
    1ff8:	81 93       	st	Z+, r24
    1ffa:	91 93       	st	Z+, r25
    1ffc:	22 50       	subi	r18, 0x02	; 2
    1ffe:	31 09       	sbc	r19, r1
    2000:	39 83       	std	Y+1, r19	; 0x01
    2002:	28 83       	st	Y, r18
    2004:	d7 cf       	rjmp	.-82     	; 0x1fb4 <malloc+0x70>
    2006:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <__brkval>
    200a:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <__brkval+0x1>
    200e:	23 2b       	or	r18, r19
    2010:	41 f4       	brne	.+16     	; 0x2022 <malloc+0xde>
    2012:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2016:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    201a:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <__brkval+0x1>
    201e:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <__brkval>
    2022:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2026:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    202a:	21 15       	cp	r18, r1
    202c:	31 05       	cpc	r19, r1
    202e:	41 f4       	brne	.+16     	; 0x2040 <malloc+0xfc>
    2030:	2d b7       	in	r18, 0x3d	; 61
    2032:	3e b7       	in	r19, 0x3e	; 62
    2034:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2038:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    203c:	24 1b       	sub	r18, r20
    203e:	35 0b       	sbc	r19, r21
    2040:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <__brkval>
    2044:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <__brkval+0x1>
    2048:	e2 17       	cp	r30, r18
    204a:	f3 07       	cpc	r31, r19
    204c:	a0 f4       	brcc	.+40     	; 0x2076 <malloc+0x132>
    204e:	2e 1b       	sub	r18, r30
    2050:	3f 0b       	sbc	r19, r31
    2052:	28 17       	cp	r18, r24
    2054:	39 07       	cpc	r19, r25
    2056:	78 f0       	brcs	.+30     	; 0x2076 <malloc+0x132>
    2058:	ac 01       	movw	r20, r24
    205a:	4e 5f       	subi	r20, 0xFE	; 254
    205c:	5f 4f       	sbci	r21, 0xFF	; 255
    205e:	24 17       	cp	r18, r20
    2060:	35 07       	cpc	r19, r21
    2062:	48 f0       	brcs	.+18     	; 0x2076 <malloc+0x132>
    2064:	4e 0f       	add	r20, r30
    2066:	5f 1f       	adc	r21, r31
    2068:	50 93 fb 01 	sts	0x01FB, r21	; 0x8001fb <__brkval+0x1>
    206c:	40 93 fa 01 	sts	0x01FA, r20	; 0x8001fa <__brkval>
    2070:	81 93       	st	Z+, r24
    2072:	91 93       	st	Z+, r25
    2074:	9f cf       	rjmp	.-194    	; 0x1fb4 <malloc+0x70>
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	e0 e0       	ldi	r30, 0x00	; 0
    207a:	9c cf       	rjmp	.-200    	; 0x1fb4 <malloc+0x70>

0000207c <free>:
free():
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	e9 f0       	breq	.+58     	; 0x20be <free+0x42>
    2084:	fc 01       	movw	r30, r24
    2086:	32 97       	sbiw	r30, 0x02	; 2
    2088:	13 82       	std	Z+3, r1	; 0x03
    208a:	12 82       	std	Z+2, r1	; 0x02
    208c:	a0 91 fc 01 	lds	r26, 0x01FC	; 0x8001fc <__flp>
    2090:	b0 91 fd 01 	lds	r27, 0x01FD	; 0x8001fd <__flp+0x1>
    2094:	ed 01       	movw	r28, r26
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	10 97       	sbiw	r26, 0x00	; 0
    209c:	a1 f4       	brne	.+40     	; 0x20c6 <free+0x4a>
    209e:	20 81       	ld	r18, Z
    20a0:	31 81       	ldd	r19, Z+1	; 0x01
    20a2:	82 0f       	add	r24, r18
    20a4:	93 1f       	adc	r25, r19
    20a6:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <__brkval>
    20aa:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <__brkval+0x1>
    20ae:	28 17       	cp	r18, r24
    20b0:	39 07       	cpc	r19, r25
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <free+0x3a>
    20b4:	61 c0       	rjmp	.+194    	; 0x2178 <free+0xfc>
    20b6:	f0 93 fb 01 	sts	0x01FB, r31	; 0x8001fb <__brkval+0x1>
    20ba:	e0 93 fa 01 	sts	0x01FA, r30	; 0x8001fa <__brkval>
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	08 95       	ret
    20c4:	ea 01       	movw	r28, r20
    20c6:	ce 17       	cp	r28, r30
    20c8:	df 07       	cpc	r29, r31
    20ca:	e8 f5       	brcc	.+122    	; 0x2146 <free+0xca>
    20cc:	4a 81       	ldd	r20, Y+2	; 0x02
    20ce:	5b 81       	ldd	r21, Y+3	; 0x03
    20d0:	9e 01       	movw	r18, r28
    20d2:	41 15       	cp	r20, r1
    20d4:	51 05       	cpc	r21, r1
    20d6:	b1 f7       	brne	.-20     	; 0x20c4 <free+0x48>
    20d8:	e9 01       	movw	r28, r18
    20da:	fb 83       	std	Y+3, r31	; 0x03
    20dc:	ea 83       	std	Y+2, r30	; 0x02
    20de:	49 91       	ld	r20, Y+
    20e0:	59 91       	ld	r21, Y+
    20e2:	c4 0f       	add	r28, r20
    20e4:	d5 1f       	adc	r29, r21
    20e6:	ec 17       	cp	r30, r28
    20e8:	fd 07       	cpc	r31, r29
    20ea:	61 f4       	brne	.+24     	; 0x2104 <free+0x88>
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	02 96       	adiw	r24, 0x02	; 2
    20f2:	84 0f       	add	r24, r20
    20f4:	95 1f       	adc	r25, r21
    20f6:	e9 01       	movw	r28, r18
    20f8:	99 83       	std	Y+1, r25	; 0x01
    20fa:	88 83       	st	Y, r24
    20fc:	82 81       	ldd	r24, Z+2	; 0x02
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	9b 83       	std	Y+3, r25	; 0x03
    2102:	8a 83       	std	Y+2, r24	; 0x02
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	e0 e0       	ldi	r30, 0x00	; 0
    2108:	12 96       	adiw	r26, 0x02	; 2
    210a:	8d 91       	ld	r24, X+
    210c:	9c 91       	ld	r25, X
    210e:	13 97       	sbiw	r26, 0x03	; 3
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	b9 f5       	brne	.+110    	; 0x2182 <free+0x106>
    2114:	2d 91       	ld	r18, X+
    2116:	3c 91       	ld	r19, X
    2118:	11 97       	sbiw	r26, 0x01	; 1
    211a:	cd 01       	movw	r24, r26
    211c:	02 96       	adiw	r24, 0x02	; 2
    211e:	82 0f       	add	r24, r18
    2120:	93 1f       	adc	r25, r19
    2122:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <__brkval>
    2126:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <__brkval+0x1>
    212a:	28 17       	cp	r18, r24
    212c:	39 07       	cpc	r19, r25
    212e:	39 f6       	brne	.-114    	; 0x20be <free+0x42>
    2130:	30 97       	sbiw	r30, 0x00	; 0
    2132:	51 f5       	brne	.+84     	; 0x2188 <free+0x10c>
    2134:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <__flp+0x1>
    2138:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__flp>
    213c:	b0 93 fb 01 	sts	0x01FB, r27	; 0x8001fb <__brkval+0x1>
    2140:	a0 93 fa 01 	sts	0x01FA, r26	; 0x8001fa <__brkval>
    2144:	bc cf       	rjmp	.-136    	; 0x20be <free+0x42>
    2146:	d3 83       	std	Z+3, r29	; 0x03
    2148:	c2 83       	std	Z+2, r28	; 0x02
    214a:	40 81       	ld	r20, Z
    214c:	51 81       	ldd	r21, Z+1	; 0x01
    214e:	84 0f       	add	r24, r20
    2150:	95 1f       	adc	r25, r21
    2152:	c8 17       	cp	r28, r24
    2154:	d9 07       	cpc	r29, r25
    2156:	61 f4       	brne	.+24     	; 0x2170 <free+0xf4>
    2158:	4e 5f       	subi	r20, 0xFE	; 254
    215a:	5f 4f       	sbci	r21, 0xFF	; 255
    215c:	88 81       	ld	r24, Y
    215e:	99 81       	ldd	r25, Y+1	; 0x01
    2160:	48 0f       	add	r20, r24
    2162:	59 1f       	adc	r21, r25
    2164:	51 83       	std	Z+1, r21	; 0x01
    2166:	40 83       	st	Z, r20
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	9b 81       	ldd	r25, Y+3	; 0x03
    216c:	93 83       	std	Z+3, r25	; 0x03
    216e:	82 83       	std	Z+2, r24	; 0x02
    2170:	21 15       	cp	r18, r1
    2172:	31 05       	cpc	r19, r1
    2174:	09 f0       	breq	.+2      	; 0x2178 <free+0xfc>
    2176:	b0 cf       	rjmp	.-160    	; 0x20d8 <free+0x5c>
    2178:	f0 93 fd 01 	sts	0x01FD, r31	; 0x8001fd <__flp+0x1>
    217c:	e0 93 fc 01 	sts	0x01FC, r30	; 0x8001fc <__flp>
    2180:	9e cf       	rjmp	.-196    	; 0x20be <free+0x42>
    2182:	fd 01       	movw	r30, r26
    2184:	dc 01       	movw	r26, r24
    2186:	c0 cf       	rjmp	.-128    	; 0x2108 <free+0x8c>
    2188:	13 82       	std	Z+3, r1	; 0x03
    218a:	12 82       	std	Z+2, r1	; 0x02
    218c:	d7 cf       	rjmp	.-82     	; 0x213c <free+0xc0>

0000218e <realloc>:
realloc():
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	a0 e0       	ldi	r26, 0x00	; 0
    2192:	ed ec       	ldi	r30, 0xCD	; 205
    2194:	f0 e1       	ldi	r31, 0x10	; 16
    2196:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x4>
    219a:	8c 01       	movw	r16, r24
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	51 f4       	brne	.+20     	; 0x21b4 <realloc+0x26>
    21a0:	cb 01       	movw	r24, r22
    21a2:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <malloc>
    21a6:	8c 01       	movw	r16, r24
    21a8:	c8 01       	movw	r24, r16
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	e0 e1       	ldi	r30, 0x10	; 16
    21b0:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x4>
    21b4:	fc 01       	movw	r30, r24
    21b6:	e6 0f       	add	r30, r22
    21b8:	f7 1f       	adc	r31, r23
    21ba:	9c 01       	movw	r18, r24
    21bc:	22 50       	subi	r18, 0x02	; 2
    21be:	31 09       	sbc	r19, r1
    21c0:	e2 17       	cp	r30, r18
    21c2:	f3 07       	cpc	r31, r19
    21c4:	08 f4       	brcc	.+2      	; 0x21c8 <realloc+0x3a>
    21c6:	9d c0       	rjmp	.+314    	; 0x2302 <realloc+0x174>
    21c8:	d9 01       	movw	r26, r18
    21ca:	cd 91       	ld	r28, X+
    21cc:	dc 91       	ld	r29, X
    21ce:	11 97       	sbiw	r26, 0x01	; 1
    21d0:	c6 17       	cp	r28, r22
    21d2:	d7 07       	cpc	r29, r23
    21d4:	98 f0       	brcs	.+38     	; 0x21fc <realloc+0x6e>
    21d6:	c5 30       	cpi	r28, 0x05	; 5
    21d8:	d1 05       	cpc	r29, r1
    21da:	30 f3       	brcs	.-52     	; 0x21a8 <realloc+0x1a>
    21dc:	ce 01       	movw	r24, r28
    21de:	04 97       	sbiw	r24, 0x04	; 4
    21e0:	86 17       	cp	r24, r22
    21e2:	97 07       	cpc	r25, r23
    21e4:	08 f3       	brcs	.-62     	; 0x21a8 <realloc+0x1a>
    21e6:	c6 1b       	sub	r28, r22
    21e8:	d7 0b       	sbc	r29, r23
    21ea:	22 97       	sbiw	r28, 0x02	; 2
    21ec:	c1 93       	st	Z+, r28
    21ee:	d1 93       	st	Z+, r29
    21f0:	6d 93       	st	X+, r22
    21f2:	7c 93       	st	X, r23
    21f4:	cf 01       	movw	r24, r30
    21f6:	0e 94 3e 10 	call	0x207c	; 0x207c <free>
    21fa:	d6 cf       	rjmp	.-84     	; 0x21a8 <realloc+0x1a>
    21fc:	5b 01       	movw	r10, r22
    21fe:	ac 1a       	sub	r10, r28
    2200:	bd 0a       	sbc	r11, r29
    2202:	4c 01       	movw	r8, r24
    2204:	8c 0e       	add	r8, r28
    2206:	9d 1e       	adc	r9, r29
    2208:	a0 91 fc 01 	lds	r26, 0x01FC	; 0x8001fc <__flp>
    220c:	b0 91 fd 01 	lds	r27, 0x01FD	; 0x8001fd <__flp+0x1>
    2210:	51 2c       	mov	r5, r1
    2212:	41 2c       	mov	r4, r1
    2214:	f1 2c       	mov	r15, r1
    2216:	e1 2c       	mov	r14, r1
    2218:	10 97       	sbiw	r26, 0x00	; 0
    221a:	31 f5       	brne	.+76     	; 0x2268 <realloc+0xda>
    221c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <__brkval>
    2220:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <__brkval+0x1>
    2224:	88 15       	cp	r24, r8
    2226:	99 05       	cpc	r25, r9
    2228:	09 f0       	breq	.+2      	; 0x222c <realloc+0x9e>
    222a:	5c c0       	rjmp	.+184    	; 0x22e4 <realloc+0x156>
    222c:	46 16       	cp	r4, r22
    222e:	57 06       	cpc	r5, r23
    2230:	08 f0       	brcs	.+2      	; 0x2234 <realloc+0xa6>
    2232:	58 c0       	rjmp	.+176    	; 0x22e4 <realloc+0x156>
    2234:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2238:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	41 f4       	brne	.+16     	; 0x2250 <realloc+0xc2>
    2240:	8d b7       	in	r24, 0x3d	; 61
    2242:	9e b7       	in	r25, 0x3e	; 62
    2244:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2248:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    224c:	84 1b       	sub	r24, r20
    224e:	95 0b       	sbc	r25, r21
    2250:	e8 17       	cp	r30, r24
    2252:	f9 07       	cpc	r31, r25
    2254:	08 f0       	brcs	.+2      	; 0x2258 <realloc+0xca>
    2256:	55 c0       	rjmp	.+170    	; 0x2302 <realloc+0x174>
    2258:	f0 93 fb 01 	sts	0x01FB, r31	; 0x8001fb <__brkval+0x1>
    225c:	e0 93 fa 01 	sts	0x01FA, r30	; 0x8001fa <__brkval>
    2260:	f9 01       	movw	r30, r18
    2262:	71 83       	std	Z+1, r23	; 0x01
    2264:	60 83       	st	Z, r22
    2266:	a0 cf       	rjmp	.-192    	; 0x21a8 <realloc+0x1a>
    2268:	8d 91       	ld	r24, X+
    226a:	9c 91       	ld	r25, X
    226c:	11 97       	sbiw	r26, 0x01	; 1
    226e:	12 96       	adiw	r26, 0x02	; 2
    2270:	6c 90       	ld	r6, X
    2272:	12 97       	sbiw	r26, 0x02	; 2
    2274:	13 96       	adiw	r26, 0x03	; 3
    2276:	7c 90       	ld	r7, X
    2278:	13 97       	sbiw	r26, 0x03	; 3
    227a:	a8 15       	cp	r26, r8
    227c:	b9 05       	cpc	r27, r9
    227e:	59 f5       	brne	.+86     	; 0x22d6 <realloc+0x148>
    2280:	6c 01       	movw	r12, r24
    2282:	42 e0       	ldi	r20, 0x02	; 2
    2284:	c4 0e       	add	r12, r20
    2286:	d1 1c       	adc	r13, r1
    2288:	ca 14       	cp	r12, r10
    228a:	db 04       	cpc	r13, r11
    228c:	20 f1       	brcs	.+72     	; 0x22d6 <realloc+0x148>
    228e:	ac 01       	movw	r20, r24
    2290:	4a 19       	sub	r20, r10
    2292:	5b 09       	sbc	r21, r11
    2294:	da 01       	movw	r26, r20
    2296:	12 96       	adiw	r26, 0x02	; 2
    2298:	15 97       	sbiw	r26, 0x05	; 5
    229a:	80 f0       	brcs	.+32     	; 0x22bc <realloc+0x12e>
    229c:	62 82       	std	Z+2, r6	; 0x02
    229e:	73 82       	std	Z+3, r7	; 0x03
    22a0:	51 83       	std	Z+1, r21	; 0x01
    22a2:	40 83       	st	Z, r20
    22a4:	d9 01       	movw	r26, r18
    22a6:	6d 93       	st	X+, r22
    22a8:	7c 93       	st	X, r23
    22aa:	e1 14       	cp	r14, r1
    22ac:	f1 04       	cpc	r15, r1
    22ae:	71 f0       	breq	.+28     	; 0x22cc <realloc+0x13e>
    22b0:	d7 01       	movw	r26, r14
    22b2:	13 96       	adiw	r26, 0x03	; 3
    22b4:	fc 93       	st	X, r31
    22b6:	ee 93       	st	-X, r30
    22b8:	12 97       	sbiw	r26, 0x02	; 2
    22ba:	76 cf       	rjmp	.-276    	; 0x21a8 <realloc+0x1a>
    22bc:	22 96       	adiw	r28, 0x02	; 2
    22be:	8c 0f       	add	r24, r28
    22c0:	9d 1f       	adc	r25, r29
    22c2:	f9 01       	movw	r30, r18
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
    22c8:	f3 01       	movw	r30, r6
    22ca:	ef cf       	rjmp	.-34     	; 0x22aa <realloc+0x11c>
    22cc:	f0 93 fd 01 	sts	0x01FD, r31	; 0x8001fd <__flp+0x1>
    22d0:	e0 93 fc 01 	sts	0x01FC, r30	; 0x8001fc <__flp>
    22d4:	69 cf       	rjmp	.-302    	; 0x21a8 <realloc+0x1a>
    22d6:	48 16       	cp	r4, r24
    22d8:	59 06       	cpc	r5, r25
    22da:	08 f4       	brcc	.+2      	; 0x22de <realloc+0x150>
    22dc:	2c 01       	movw	r4, r24
    22de:	7d 01       	movw	r14, r26
    22e0:	d3 01       	movw	r26, r6
    22e2:	9a cf       	rjmp	.-204    	; 0x2218 <realloc+0x8a>
    22e4:	cb 01       	movw	r24, r22
    22e6:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <malloc>
    22ea:	7c 01       	movw	r14, r24
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	49 f0       	breq	.+18     	; 0x2302 <realloc+0x174>
    22f0:	ae 01       	movw	r20, r28
    22f2:	b8 01       	movw	r22, r16
    22f4:	0e 94 84 11 	call	0x2308	; 0x2308 <memcpy>
    22f8:	c8 01       	movw	r24, r16
    22fa:	0e 94 3e 10 	call	0x207c	; 0x207c <free>
    22fe:	87 01       	movw	r16, r14
    2300:	53 cf       	rjmp	.-346    	; 0x21a8 <realloc+0x1a>
    2302:	10 e0       	ldi	r17, 0x00	; 0
    2304:	00 e0       	ldi	r16, 0x00	; 0
    2306:	50 cf       	rjmp	.-352    	; 0x21a8 <realloc+0x1a>

00002308 <memcpy>:
memcpy():
    2308:	fb 01       	movw	r30, r22
    230a:	dc 01       	movw	r26, r24
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <memcpy+0xa>
    230e:	01 90       	ld	r0, Z+
    2310:	0d 92       	st	X+, r0
    2312:	41 50       	subi	r20, 0x01	; 1
    2314:	50 40       	sbci	r21, 0x00	; 0
    2316:	d8 f7       	brcc	.-10     	; 0x230e <memcpy+0x6>
    2318:	08 95       	ret

0000231a <strcpy>:
strcpy():
    231a:	fb 01       	movw	r30, r22
    231c:	dc 01       	movw	r26, r24
    231e:	01 90       	ld	r0, Z+
    2320:	0d 92       	st	X+, r0
    2322:	00 20       	and	r0, r0
    2324:	e1 f7       	brne	.-8      	; 0x231e <strcpy+0x4>
    2326:	08 95       	ret

00002328 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    2328:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    232a:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    232c:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    232e:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    2330:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    2332:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    2334:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    2336:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    2338:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    233a:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    233c:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    233e:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    2340:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    2342:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    2344:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    2346:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    2348:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    234a:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    234c:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    234e:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    2350:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    2352:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    2354:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    2356:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    2358:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    235a:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    235c:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    235e:	09 94       	ijmp

00002360 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    2360:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    2362:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    2364:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    2366:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    2368:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    236a:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    236c:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    236e:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    2370:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    2372:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    2374:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    2376:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    2378:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    237a:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    237c:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    237e:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    2380:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    2382:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    2384:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    2386:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    2388:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    238a:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    238c:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    238e:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    2390:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    2392:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    2394:	08 95       	ret

00002396 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2396:	f8 94       	cli

00002398 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2398:	ff cf       	rjmp	.-2      	; 0x2398 <__stop_program>
